<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mac Os on Guangchuang YU</title>
    <link>http://guangchuangyu.github.io/categories/mac-os/</link>
    <description>Recent content in Mac Os on Guangchuang YU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Guangchuang YU</copyright>
    <lastBuildDate>Fri, 14 Nov 2014 04:34:48 +0800</lastBuildDate>
    <atom:link href="http://guangchuangyu.github.io/categories/mac-os/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>hello yosemite</title>
      <link>http://guangchuangyu.github.io/post/mac/2014_hello-yosemite/</link>
      <pubDate>Fri, 14 Nov 2014 04:34:48 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/post/mac/2014_hello-yosemite/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://guangchuangyu.github.io/blog_images/2014/11/Screenshot-2014-11-11-14.07.45.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Installing OS is painful, you need to re-install all the software and
configure them to the way you want. We don&amp;rsquo;t want to wast time in doing
this. To prevent doing this dirty job, we perform an upgrade install
instead of clean install. We all have experience of upgrading Windows
sucks, &lt;a href=&#34;http://osxdaily.com/2014/10/17/os-x-yosemite-installation-stuck/&#34;&gt;same as OS X&lt;/a&gt;.
All the issues you have in old system will be remained, and sometimes
new issues will be introduced in the process of upgrading. The system
will be slower compare to clean install one.&lt;/p&gt;

&lt;p&gt;Life is short, we want a clean system without wasting time in setting
software, but how can it be. The answer is yes and no. Firstly, you
should have two partitions, one for OS and the other one for your data.
Only in this way, you can formatting the system partition and keep your
data untouch.&lt;/p&gt;

&lt;p&gt;When I was an undergraduate student, I install both
&lt;a href=&#34;http://guangchuangyu.github.io/categories/bsd&#34;&gt;FreeBSD&lt;/a&gt; and
&lt;a href=&#34;http://guangchuangyu.github.io/categories/linux&#34;&gt;debian&lt;/a&gt; in my PC. They were configured to
share the same home partition, so that I don&amp;rsquo;t have to configure
software in both of the systems. In OS X, the home directory is not
located at traditional path /home/userName, but at /Users/userName. You
should change your home directory from system partition to your data
partition. If you have done that, you can formatting your system
partition as I do and clean install the OS X system.&lt;/p&gt;

&lt;p&gt;After the system was installed, I need to install Xcode for compiling
software, &lt;a href=&#34;https://tug.org/mactex/&#34;&gt;MacTex&lt;/a&gt; for compiling $\LaTeX$
documents, and MS office, which is the reason I need &lt;a href=&#34;http://guangchuangyu.github.io/2012/03/installing-hackintosh/&#34;&gt;OS X&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Almost all the other software I used in OS X is the same as in Linux.
After I setting the home directory to my previous location. All the
software will perform as in my old system. My setting of the trackpad is
remain, and so as my dock items; Firefox have its bookmarks and plugins;
&lt;a href=&#34;http://guangchuangyu.github.io/2013/09/install-emacs-on-mac/&#34;&gt;Emacs&lt;/a&gt; know how to
load extensions; Even plugins I installed for MS Word are already there.
I don&amp;rsquo;t need to do anything, and everything works in their old way.&lt;/p&gt;

&lt;p&gt;Upgrading R is tedious, for you need to re-install all the packages. The
library path for brew installed R is something like this:
&amp;lsquo;﻿﻿/usr/local/Cellar/r/3.1.2/R.framework/Versions/3.1/Resources/library&amp;rsquo;.
If you installed your packages in this folder, you need to &lt;a href=&#34;http://www.r-bloggers.com/update-all-user-installed-r-packages-again/&#34;&gt;get installed package names&lt;/a&gt; from it. The path is long and hard to remember (many soft links may get you lost if you don&amp;rsquo;t know the function &amp;lsquo;.libPaths()&amp;rsquo;). My solution is
to install all my packages in &lt;code&gt;~/Library/R/3.1/library&lt;/code&gt;, so after I re-installed R, all the packages are still there. When R is upgrade to 3.2, all I need is to move the folder from 3.1 to 3.2 and use one command &amp;lsquo;update.packages(ask=FALSE, checkBuilt=TRUE)&amp;rsquo; to update them. This is a painless way for R and this idea is the secret of painless clean install of UNIX-like systems including OS X.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install Emacs on Mac</title>
      <link>http://guangchuangyu.github.io/post/software/2013_install-emacs-on-mac/</link>
      <pubDate>Tue, 10 Sep 2013 18:04:22 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/post/software/2013_install-emacs-on-mac/</guid>
      <description>

&lt;h2 id=&#34;package-manager:a0d2dabbee19e6fccf2cd8eeaa0e67d0&#34;&gt;package manager&lt;/h2&gt;

&lt;p&gt;之前一直用&lt;a href=&#34;http://guangchuangyu.github.io/categories/bsd/&#34;&gt;NetBSD&lt;/a&gt;的&lt;a href=&#34;http://guangchuangyu.github.io/2007/05/%E6%88%91%E5%88%B6%E4%BD%9C%E7%9A%84pkgsrc/&#34;&gt;pkgsrc&lt;/a&gt;做为各种Unix-like系统的包管理系统，pkgsrc在自己内部解决依赖关系，这点对于生产环境来说，是很好的一个优点，我通常会在服务器里装一个pkgsrc，在用户目录下，维护一套UNIX软件。但是用在自己的机器上，内部解决软件依赖，就是个缺点，浪费编译时间和硬盘空间。&lt;/p&gt;

&lt;p&gt;Mac上可用的包管理系统很多，Fink移植于&lt;a href=&#34;http://guangchuangyu.github.io/categories/linux/&#34;&gt;Debian&lt;/a&gt;的apt，&lt;a href=&#34;http://guangchuangyu.github.io/categories/linux/&#34;&gt;Gentoo&lt;/a&gt;的portage也支持OS
X。OS X是基于BSD的系统，BSD有自己的一套包管理系统，如FreeBSD的ports和&lt;a href=&#34;http://guangchuangyu.github.io/categories/bsd/&#34;&gt;NetBSD&lt;/a&gt;的&lt;a href=&#34;http://guangchuangyu.github.io/2007/05/%E6%88%91%E5%88%B6%E4%BD%9C%E7%9A%84pkgsrc/&#34;&gt;pkgsrc&lt;/a&gt;，MacPorts可以看作是这一系列中的一个，不过它并不是OS
X原生的，它只是OpenDarwin的子项目，所以和pkgsrc一个样，也是内部解决依赖，真正为OS
X设计的原生包管理系统非Homebrew莫属，它会尽量依赖系统里已有的软件。&lt;/p&gt;

&lt;p&gt;自从用了Homebrew之后，再也不用为系统里有两套perl和python而crazy了，之前通过&lt;a href=&#34;http://guangchuangyu.github.io/2011/06/screen-shot/&#34;&gt;pkgsrc装的软件&lt;/a&gt;全删掉，改Homebrew来安装和管理。
如果软件没有被pkgsrc收录，而想通过pkgsrc来管理的话，那就得自己&lt;a href=&#34;http://guangchuangyu.github.io/2007/05/%E6%88%91%E5%88%B6%E4%BD%9C%E7%9A%84pkgsrc/&#34;&gt;写makefile&lt;/a&gt;，而homebrew，则可以自动帮你生成Formula，比如我要安装&lt;a href=&#34;http://users.soe.ucsc.edu/~kent/src/&#34;&gt;blat&lt;/a&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew create http://users.soe.ucsc.edu/~kent/src/blatSrc35.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然有可能需要编辑一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew edit blat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大多数情况下，并不需要修改，创建了formula之后，就可以使用homebrew安装。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install blat
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;emacs:a0d2dabbee19e6fccf2cd8eeaa0e67d0&#34;&gt;Emacs&lt;/h2&gt;

&lt;p&gt;虽然Homebrew是为OS
X设计的，但它毕竟不是苹果的东西，无法管理系统内置的程序，OS
X自带Emacs，版本22，已经很老了，而且没有图形界面，为了方便管理和升级，只能把系统自带的删掉，用Homebrew来安装新版的Emacs-24.3，安装时使用参数&amp;ndash;cocoa，使得emacs能够识别OS
X的keybinding，创建链接到Applications下，这样可以在Applications中双击运行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm /usr/bin/emacs
rm -rf /usr/share/emacs
brew install --cocoa emacs
ln -s /usr/local/Cellar/emacs/24.3/Emacs.app /Applications/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;site-lisp:a0d2dabbee19e6fccf2cd8eeaa0e67d0&#34;&gt;site-lisp&lt;/h2&gt;

&lt;p&gt;在.emacs.d目录下新建site-lisp目录，用于放置各种第三方的包，在.emacs里加入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(let ((default-directory &amp;quot;~/.emacs.d/site-lisp/&amp;quot;))
  (normal-top-level-add-subdirs-to-load-path))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;让emacs启动时，加载site-lisp及其子目录。&lt;/p&gt;

&lt;h2 id=&#34;eshell-path:a0d2dabbee19e6fccf2cd8eeaa0e67d0&#34;&gt;eshell PATH&lt;/h2&gt;

&lt;p&gt;eshell是个非常美好的存在，在windows下安装Emacs，就拥有了一个小型的&lt;a href=&#34;http://guangchuangyu.github.io/categories/shell/&#34;&gt;shell&lt;/a&gt;，非常方便，当然它并不是bash，如果在windows下使用会缺少很多bash内置程序和许多的unix命令行工具，幸好可以配置emacs调用cygwin的bash。&lt;/p&gt;

&lt;p&gt;eshell并不使用.bash_profile中定义的PATH，好在eshell中内置addpath程序，可以非常方便地把路径加入到PATH中去。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ $ addpath 
/usr/bin/
/bin/
/usr/sbin/
/sbin/
~ $ addpath -b /usr/local/bin
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
~ $ echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过这种方式，只是临时加路径而已。&lt;/p&gt;

&lt;p&gt;要想永久性把改变PATH变量，还是需要把它加入到.emacs中去。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(setenv &amp;quot;PATH&amp;quot; (concat &amp;quot;/usr/local/bin:&amp;quot; (getenv &amp;quot;PATH&amp;quot;)))
(setq exec-path (append exec-path &#39;(&amp;quot;/usr/local/bin&amp;quot; &amp;quot;/opt/bin&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;color-theme:a0d2dabbee19e6fccf2cd8eeaa0e67d0&#34;&gt;color-theme&lt;/h2&gt;

&lt;p&gt;安装&lt;a href=&#34;http://www.nongnu.org/color-theme/&#34;&gt;color-theme&lt;/a&gt;，放在.emacs.d/site-lisp下，在.emacs里加入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(require &#39;color-theme)
(color-theme-initialize)
(color-theme-robin-hood)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动时加载color-theme，搞代码很伤眼啊 =,=&lt;/p&gt;

&lt;h2 id=&#34;maxima:a0d2dabbee19e6fccf2cd8eeaa0e67d0&#34;&gt;Maxima&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://guangchuangyu.github.io/2005/05/%E5%9C%A8emacs%E9%87%8C%E4%BD%BF%E7%94%A8maxima/&#34;&gt;Maxima&lt;/a&gt;是一个计算机代数运算系统，它是由MIT于1968至1982年间开发的Macsyma系统演变而来的。MIT于1982年将Macsyma源代码交与美国能源部（DOE），这部分代码后来被称作DOE
Macsyma。DOE Macsyma的一个版本从1982年起由德克萨斯大学的William F.
Schelter教授维护，直到Schelter教授于2001年去逝。在1998年，Schelter教授从能源部获得了授权，将DOE
Macsyma源代码以GNU Public
License版权协议发布。在2000年，他在SourceForge开始了Maxima项目，继续维护开发DOE
Macsyma，自此该软件被称作Maxima。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&#34;http://guangchuangyu.github.io/2005/05/%E5%9C%A8emacs%E9%87%8C%E4%BD%BF%E7%94%A8maxima/&#34;&gt;Emacs调用maxima&lt;/a&gt;是非常爽的，公式可以通过&lt;a href=&#34;http://guangchuangyu.github.io/categories/latex&#34;&gt;LaTeX&lt;/a&gt;表示出来，非常漂亮，把buffer保存为txt，公式将被保存为&lt;a href=&#34;http://guangchuangyu.github.io/categories/latex&#34;&gt;LaTeX&lt;/a&gt;代码。&lt;/p&gt;

&lt;h2 id=&#34;ess:a0d2dabbee19e6fccf2cd8eeaa0e67d0&#34;&gt;ESS&lt;/h2&gt;

&lt;p&gt;另一个必备是&lt;code&gt;ESS&lt;/code&gt;，可以在emacs调用R，解压放在.emacs.d/site-lisp下，在.emacs里加入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(require &#39;ess-site)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ESS在我心中，完胜RStudio，唯一不足的是画图时要弹窗口，如果能够像&lt;code&gt;imaxima&lt;/code&gt;一样，在emacs
buffer中支持&lt;a href=&#34;http://guangchuangyu.github.io/2005/05/%E5%9C%A8emacs%E9%87%8C%E4%BD%BF%E7%94%A8maxima/&#34;&gt;inline
plot&lt;/a&gt;就完美了。&lt;/p&gt;

&lt;h2 id=&#34;markdown:a0d2dabbee19e6fccf2cd8eeaa0e67d0&#34;&gt;Markdown&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://jblevins.org/projects/markdown-mode/&#34;&gt;Markdown-mode&lt;/a&gt;让emacs支持markdown语法，安装之后，需要在.emacs中加入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;;; markdown mode
(autoload &#39;markdown-mode &amp;quot;markdown-mode&amp;quot;
  &amp;quot;Major mode for editing Markdown files&amp;quot; t)
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.text\\&#39;&amp;quot; . markdown-mode))
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.markdown\\&#39;&amp;quot; . markdown-mode))
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.md\\&#39;&amp;quot; . markdown-mode))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样当在emacs中打开.text/.markdown/.md文件时，将自动加载markdown-mode。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>