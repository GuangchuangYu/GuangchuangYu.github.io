<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bioc on G. Yu</title>
    <link>http://guangchuangyu.github.io/categories/bioc/</link>
    <description>Recent content in Bioc on G. Yu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Oct 2015 09:08:06 +0800</lastBuildDate>
    <atom:link href="http://guangchuangyu.github.io/categories/bioc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ChIPseq data mining with ChIPseeker</title>
      <link>http://guangchuangyu.github.io/2015/10/chipseq-data-mining-with-chipseeker/</link>
      <pubDate>Thu, 01 Oct 2015 09:08:06 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/10/chipseq-data-mining-with-chipseeker/</guid>
      <description>

&lt;p&gt;ChIP-seq is rapidly becoming a common technique and there are a large
number of dataset available in the public domain. Results from
individual experiments provide a limited understanding of chromatin
interactions, as there is many factors cooperate to regulate
transcription. Unlike other tools that designed for single dataset,
&lt;a href=&#34;http://www.bioconductor.org/packages/ChIPseeker&#34;&gt;ChIPseeker&lt;/a&gt; is
designed for comparing profiles of ChIP-seq datasets at different
levels.&lt;/p&gt;

&lt;p&gt;We provide functions to compare profiles of peaks binding to TSS
regions, annotation, and enriched functional profiles. More importantly,
ChIPseeker incorporates statistical testing of co-occurrence of
different ChIP-seq datasets and can be used to identify co-factors.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; library(ChIPseeker)
&amp;gt; ff=getSampleFiles()
&amp;gt; x = enrichPeakOverlap(ff[[5]], unlist(ff[1:4]), nShuffle=10000, pAdjustMethod=&amp;quot;BH&amp;quot;, chainFile=NULL)
&amp;gt;&amp;gt; permutation test of peak overlap...       2015-09-24 14:23:43
  |======================================================================| 100%
&amp;gt; x
                                                      qSample
ARmo_0M    GSM1295077_CBX7_BF_ChipSeq_mergedReps_peaks.bed.gz
ARmo_1nM   GSM1295077_CBX7_BF_ChipSeq_mergedReps_peaks.bed.gz
ARmo_100nM GSM1295077_CBX7_BF_ChipSeq_mergedReps_peaks.bed.gz
CBX6_BF    GSM1295077_CBX7_BF_ChipSeq_mergedReps_peaks.bed.gz
                                                      tSample qLen tLen N_OL
ARmo_0M                       GSM1174480_ARmo_0M_peaks.bed.gz 1663  812    0
ARmo_1nM                     GSM1174481_ARmo_1nM_peaks.bed.gz 1663 2296    8
ARmo_100nM                 GSM1174482_ARmo_100nM_peaks.bed.gz 1663 1359    3
CBX6_BF    GSM1295076_CBX6_BF_ChipSeq_mergedReps_peaks.bed.gz 1663 1331  968
               pvalue   p.adjust
ARmo_0M    0.88901110 0.88901110
ARmo_1nM   0.15118488 0.30236976
ARmo_100nM 0.37296270 0.49728360
CBX6_BF    0.00009999 0.00039996
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ChIPseeker/Screenshot%202015-09-24%2015.05.08.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The enrichment analysis of peak overlap is based on permutation test.
&lt;em&gt;nShuffle&lt;/em&gt; of random ChIP data were generated to estimate the background
null distribution of the overlap and p-value is then calculated by the
probability of observing more extreme overlap. Multiple comparison
correction is also incorporated.&lt;/p&gt;

&lt;p&gt;The most exciting feature in ChIPseeker is that it collected more than
18,000 bed file information from GEO database and make this co-factor
inference available to the community. With these datasets, we can
compare our own dataset to those deposited in GEO to identify
co-occurrence binding proteins that maybe cooperated with the one we are
interested in. Hypothesis can be generated by this inference and serve
as a starting point for further study.&lt;/p&gt;

&lt;h3 id=&#34;reference:b5b0ae7141a3dcd30d9a3b4fda249992&#34;&gt;Reference&lt;/h3&gt;

&lt;p&gt;G Yu, LG Wang, QY He. &lt;a href=&#34;http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btv145&#34;&gt;ChIPseeker: an R/Bioconductor package for ChIP
peak annotation, comparison and
visualization&lt;/a&gt;.
Bioinformatics. 2015, 31(14):2382-2383.
PMID:&lt;a href=&#34;http://www.ncbi.nlm.nih.gov/pubmed/25765347&#34;&gt;25765347&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>subsetting data in ggtree</title>
      <link>http://guangchuangyu.github.io/2015/09/subsetting-data-in-ggtree/</link>
      <pubDate>Thu, 24 Sep 2015 01:20:21 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/09/subsetting-data-in-ggtree/</guid>
      <description>&lt;p&gt;Subsetting is commonly used in ggtree as we would like to for example
separating internal nodes from tips. We may also want to display
annotation to specific node(s)/tip(s).&lt;/p&gt;

&lt;p&gt;Some software may stored clade information (e.g. bootstrap value) as
internal node labels. Indeed we want to manipulate such information and
taxa labels separately.&lt;/p&gt;

&lt;p&gt;In current ggplot2 (version=1.0.1, access date:2015-09-23), it support
&lt;em&gt;subset&lt;/em&gt;. For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;library(ggplot2)
library(ggtree)
tree=read.tree(text=&amp;quot;((A:2,B:2)95:2,(C:2,D:2)100:2);&amp;quot;)
ggtree(tree) + geom_text(aes(label=label), subset=.(!isTip), hjust=-.2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this feature was removed in github version of ggplot2 and will not
be available in next release.&lt;/p&gt;

&lt;p&gt;In github version of ggtree, we implemented geom_text2, geom_point2,
and geom_segment2, that works exactly like geom_text, geom_point and
geom_segment respectively with &lt;em&gt;subset&lt;/em&gt; supported. The syntax is
slightly different.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;ggtree(tree) + geom_text2(aes(label=label, subset=!isTip), hjust=-.2) +
        geom_point2(aes(subset=!isTip), color=&amp;quot;red&amp;quot;, size=3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ggtree/subsetting.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Note: The example was from the discussion of &lt;a href=&#34;https://github.com/GuangchuangYu/ggtree/issues/13&#34;&gt;github
issue&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>comic phylogenetic tree with ggtree and comicR</title>
      <link>http://guangchuangyu.github.io/2015/09/comic-phylogenetic-tree-with-ggtree-and-comicr/</link>
      <pubDate>Tue, 08 Sep 2015 01:15:26 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/09/comic-phylogenetic-tree-with-ggtree-and-comicr/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.bioconductor.org/packages/release/bioc/html/ggtree.html&#34;&gt;ggtree&lt;/a&gt;
applies the concepts of grammar of graphic in phylogenetic tree
presentation and make it easy to add multiple layers of text and even
figures above a 🌲.&lt;/p&gt;

&lt;p&gt;Here, I cartoonize a phylogenetic tree generated by
&lt;a href=&#34;http://www.bioconductor.org/packages/release/bioc/html/ggtree.html&#34;&gt;ggtree&lt;/a&gt;
with &lt;a href=&#34;https://github.com/timelyportfolio/comicR&#34;&gt;comicR&lt;/a&gt;, which is a
funny package to generate comic (xkcd-like) graph in R. Have fun with
&lt;a href=&#34;http://www.bioconductor.org/packages/release/bioc/html/ggtree.html&#34;&gt;ggtree&lt;/a&gt;
and &lt;a href=&#34;https://github.com/timelyportfolio/comicR&#34;&gt;comicR&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;library(htmltools)
library(XML)
library(gridSVG)
library(comicR)

library(ggplot2)
library(ggtree)

p &amp;lt;- ggtree(rtree(30), layout=&amp;quot;fan&amp;quot;)  + 
   geom_text(aes(label=label, angle=angle), size=5, color=&amp;quot;purple&amp;quot;, vjust=-0.3)


p
svg &amp;lt;- grid.export(name=&amp;quot;&amp;quot;)$svg
tagList(
      tags$div(
        id = &amp;quot;ggtree_comic&amp;quot;,
        tags$style(&amp;quot;#ggtree_comic text {font-family:Chalkduster;}&amp;quot;),
        HTML(saveXML(svg)),
        comicR(&amp;quot;#ggtree_comic&amp;quot;, ff=5)
      )
    ) %&amp;gt;% html_print
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/98dbdcdbbb0e7fdb174fc1f40c611aeba2ee2bc5/Bioconductor/ggtree/comicTree.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>subview</title>
      <link>http://guangchuangyu.github.io/2015/08/subview/</link>
      <pubDate>Mon, 31 Aug 2015 03:17:48 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/08/subview/</guid>
      <description>&lt;p&gt;I implemented a function, &lt;em&gt;subview&lt;/em&gt;, in
&lt;a href=&#34;http://www.bioconductor.org/packages/release/bioc/html/ggtree.html&#34;&gt;ggtree&lt;/a&gt;
that make it easy to embed a subplot in ggplot.&lt;/p&gt;

&lt;p&gt;An example is shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;library(ggplot2)
library(ggtree)

dd &amp;lt;- data.frame(x=LETTERS[1:3], y=1:3)
pie &amp;lt;- ggplot(dd, aes(x=1, y, fill=x)) + 
             geom_bar(stat=&amp;quot;identity&amp;quot;, width=1) + 
                    coord_polar(theta=&amp;quot;y&amp;quot;) + theme_tree() + 
                          xlab(NULL) + ylab(NULL) + 
                               theme_transparent()

x &amp;lt;- sample(2:9)
y &amp;lt;- sample(2:9)
width &amp;lt;- sample(seq(0.05, 0.15, length.out=length(x)))
height &amp;lt;- width

p &amp;lt;- ggplot(data=data.frame(x=c(0, 10), y=c(0, 10)), aes(x, y))+geom_blank()
print(p)
for (i in seq_along(x)) {
    p %&amp;lt;&amp;gt;% subview(pie, x[i], y[i], width[i], height[i])
    print(p)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ggtree/subview.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With this function, we can plot a specific clade and add a subplot of
the whole topology; we can also add relative statistic graph above the
tree or to a specific node. It&amp;rsquo;s not specific to phylogenetic tree, it
works with all ggplot objects as demonstrated in the example.&lt;/p&gt;

&lt;p&gt;PS: &lt;a href=&#34;http://www.bioconductor.org/packages/ggtree&#34;&gt;ggtree&lt;/a&gt; is now
presented in &lt;a href=&#34;https://cran.r-project.org/web/views/Phylogenetics.html&#34;&gt;CRAN Task View:
Phylogenetics&lt;/a&gt;.
&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ggtree/taskview_cran.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;AND get its first citation.
&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ggtree/Screenshot%202015-08-04%2021.49.27.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ggtree with funny fonts</title>
      <link>http://guangchuangyu.github.io/2015/06/ggtree-with-funny-fonts/</link>
      <pubDate>Fri, 12 Jun 2015 06:19:56 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/06/ggtree-with-funny-fonts/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/showtext/index.html&#34;&gt;showtext&lt;/a&gt;
is a neat solution to use various types of fonts in R graphs and make it
easy to use funny fonts. With
&lt;a href=&#34;http://cran.r-project.org/web/packages/showtext/index.html&#34;&gt;showtext&lt;/a&gt;,
we can draw phylogenetic tree with different types of fonts even with
symbolic/icon fonts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;require(showtext)

font.add.google(&amp;quot;Gochi Hand&amp;quot;, &amp;quot;gochi&amp;quot;)
font.add.google(&amp;quot;Rock Salt&amp;quot;, &amp;quot;rock&amp;quot;)

link = &amp;quot;http://img.dafont.com/dl/?f=wm_people_1&amp;quot;;
download.file(link, &amp;quot;wmpeople1.zip&amp;quot;, mode = &amp;quot;wb&amp;quot;);
unzip(&amp;quot;wmpeople1.zip&amp;quot;);
font.add(&amp;quot;wmpeople1&amp;quot;, &amp;quot;wmpeople1.TTF&amp;quot;);

link = &amp;quot;http://img.dafont.com/dl/?f=emoticons&amp;quot;;
download.file(link, &amp;quot;emoticons.zip&amp;quot;, mode = &amp;quot;wb&amp;quot;);
unzip(&amp;quot;emoticons.zip&amp;quot;);
font.add(&amp;quot;emoticons&amp;quot;, &amp;quot;emoticons.ttf&amp;quot;);


showtext.auto()
set.seed(2015-05-14)

library(ggplot2)
library(ggtree)

tree &amp;lt;- rtree(30)
ggtree(tree, color=&amp;quot;darkgreen&amp;quot;) + geom_tiplab(family=&amp;quot;gochi&amp;quot;) + theme_classic() +
    theme(axis.text.x=element_text(size=rel(4), family=&amp;quot;emoticons&amp;quot;, color=&amp;quot;firebrick&amp;quot;)) +
        scale_y_continuous(breaks=seq(0, 30, 4), labels=letters[c(12:17, 20, 21)]) +
            theme(axis.text.y=element_text(size=rel(4), family=&amp;quot;wmpeople1&amp;quot;, color=&amp;quot;#FDAC4F&amp;quot;)) +
                annotate(&amp;quot;text&amp;quot;, x=2, y=18, label=&amp;quot;Have fun with ggtree!&amp;quot;,
                         family=&amp;quot;rock&amp;quot;, angle=30, size=12, color=&amp;quot;steelblue&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/f6217cb7815a824b0a273e6f5147f01a9ebb367a/Bioconductor/ggtree/ggtree_funny_font.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;download.file(&amp;quot;http://dl.dafont.com/dl/?f=people_freak&amp;quot;, &amp;quot;people_freak.zip&amp;quot;, mode=&amp;quot;wb&amp;quot;)
unzip(&amp;quot;people_freak.zip&amp;quot;)
font.add(&amp;quot;people_freak&amp;quot;, &amp;quot;People_freak.ttf&amp;quot;)
ggtree(rtree(10)) + geom_text(aes(label=node, color=isTip), family=&amp;quot;people_freak&amp;quot;, hjust=0) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/524ea41306f6d9a93251eaf9e193a264e5d4dbd4/Bioconductor/ggtree/ggtree_funny_font2.png&#34; alt=&#34;&#34; /&gt;
Funny fonts can be downloaded from
&lt;a href=&#34;http://www.dafont.com/search.php?q=icon&#34;&gt;1&lt;/a&gt;,
&lt;a href=&#34;http://www.dafont.com/search.php?q=people&#34;&gt;2&lt;/a&gt; and
&lt;a href=&#34;http://www.fontspace.com/category/people&#34;&gt;3&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>use clusterProfiler as an universal enrichment analysis tool</title>
      <link>http://guangchuangyu.github.io/2015/05/use-clusterprofiler-as-an-universal-enrichment-analysis-tool/</link>
      <pubDate>Mon, 11 May 2015 08:32:04 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/05/use-clusterprofiler-as-an-universal-enrichment-analysis-tool/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.bioconductor.org/packages/release/bioc/html/clusterProfiler.html&#34;&gt;clusterProfiler&lt;/a&gt;
supports enrichment analysis of both hypergeometric test and gene set
enrichment analysis. It internally supports &lt;a href=&#34;http://geneontology.org/&#34;&gt;Gene
Ontology&lt;/a&gt; analysis of about 20 species, &lt;a href=&#34;http://www.genome.jp/kegg/&#34;&gt;Kyoto
Encyclopedia of Genes and Genomes (KEGG)&lt;/a&gt;
with all species that have annotation available in KEGG database, &lt;a href=&#34;http://david.abcc.ncifcrf.gov/summary.jsp&#34;&gt;DAVID
annotation&lt;/a&gt; (only
hypergeometric test supported), &lt;a href=&#34;http://disease-ontology.org/&#34;&gt;Disease
Ontology&lt;/a&gt; and &lt;a href=&#34;http://ncg.kcl.ac.uk/&#34;&gt;Network of Cancer
Genes&lt;/a&gt; (via
&lt;a href=&#34;http://www.bioconductor.org/packages/release/bioc/html/DOSE.html&#34;&gt;DOSE&lt;/a&gt;
for human) and &lt;a href=&#34;http://www.reactome.org/&#34;&gt;Reactome Pathway&lt;/a&gt; (via
&lt;a href=&#34;http://www.bioconductor.org/packages/release/bioc/html/ReactomePA.html&#34;&gt;ReactomePA&lt;/a&gt;
for several species). This is still not enough for users may want to
analyze their data with unsupported organisms, &lt;a href=&#34;http://geneontology.org/page/go-slim-and-subset-guide&#34;&gt;slim version of
GO&lt;/a&gt;, novel
functional annotation (eg GO via &lt;a href=&#34;https://www.blast2go.com/&#34;&gt;blastgo&lt;/a&gt;
and KEGG via &lt;a href=&#34;http://www.genome.jp/tools/kaas/&#34;&gt;KAAS&lt;/a&gt;), unsupported
ontology/pathway or customized annotation.
&lt;a href=&#34;http://www.bioconductor.org/packages/release/bioc/html/clusterProfiler.html&#34;&gt;clusterProfiler&lt;/a&gt;
provides &lt;em&gt;enricher&lt;/em&gt; function for hypergeometric test and &lt;em&gt;GSEA&lt;/em&gt; function
for gene set enrichment analysis that are designed to accept user
defined annotation. They accept two additional parameters TERM2GENE and
TERM2NAME. As indicated in the parameter names, TERM2GENE is a
data.frame with first column of term ID and second column of
corresponding mapped gene and TERM2NAME is a data.frame with first
column of term ID and second column of corresponding term name.
TERM2NAME is optional. Here I used
&lt;a href=&#34;http://www.disgenet.org/web/DisGeNET/menu/home&#34;&gt;DisGeNET&lt;/a&gt; which
contains 381056 associations, between 16666 genes and 13172 diseases, as
an example to demonstrate the usage of &lt;em&gt;enricher&lt;/em&gt; and &lt;em&gt;GSEA&lt;/em&gt; functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; require(DOSE)
&amp;gt; require(clusterProfiler)
&amp;gt; data(geneList)
&amp;gt; deg &amp;lt;- names(geneList)[abs(geneList)&amp;gt;2]

## downloaded from http://www.disgenet.org/ds/DisGeNET/results/all_gene_disease_associations.tar.gz
&amp;gt; gda &amp;lt;- read.delim(&amp;quot;all_gene_disease_associations.txt&amp;quot;)
&amp;gt; dim(gda)
[1] 415681      9
&amp;gt; head(gda)
  geneId geneSymbol                                    geneName     diseaseId
1    540      ATP7B ATPase, Cu++ transporting, beta polypeptide umls:C0019202
2    540      ATP7B ATPase, Cu++ transporting, beta polypeptide umls:C0019202
3    540      ATP7B ATPase, Cu++ transporting, beta polypeptide umls:C0019202
4   4160       MC4R                     melanocortin 4 receptor umls:C0028754
5   4160       MC4R                     melanocortin 4 receptor umls:C0028754
6   3667       IRS1                insulin receptor substrate 1 umls:C0011860
                    diseaseName     score NumberOfPubmeds   associationType
1 Hepatolenticular Degeneration 0.9898764             229  GeneticVariation
2 Hepatolenticular Degeneration 0.9898764             229         Biomarker
3 Hepatolenticular Degeneration 0.9898764             229 AlteredExpression
4                       Obesity 0.9400000             234  GeneticVariation
5                       Obesity 0.9400000             234         Biomarker
6     Diabetes Mellitus, Type 2 0.9077659             106  GeneticVariation
                                            source
1 UNIPROT, CTD_human, MGD, RGD, GAD, LHGDN, BeFree
2 UNIPROT, CTD_human, MGD, RGD, GAD, LHGDN, BeFree
3 UNIPROT, CTD_human, MGD, RGD, GAD, LHGDN, BeFree
4        UNIPROT, CTD_human, MGD, RGD, GAD, BeFree
5        UNIPROT, CTD_human, MGD, RGD, GAD, BeFree
6        UNIPROT, CTD_human, MGD, RGD, GAD, BeFree
&amp;gt;
&amp;gt; disease2gene=gda[, c(&amp;quot;diseaseId&amp;quot;, &amp;quot;geneId&amp;quot;)]
&amp;gt; disease2name=gda[, c(&amp;quot;diseaseId&amp;quot;, &amp;quot;diseaseName&amp;quot;)]

&amp;gt; x = enricher(deg, TERM2GENE=disease2gene, TERM2NAME=disease2name)
&amp;gt; head(summary(x))
                         ID                  Description GeneRatio    BgRatio
umls:C0006142 umls:C0006142    Malignant neoplasm breast    89/196 3324/16666
umls:C0006826 umls:C0006826           NEOPLASM MALIGNANT   113/196 5102/16666
umls:C0678222 umls:C0678222             Breast Carcinoma    83/196 3072/16666
umls:C1458156 umls:C1458156 Recurrent Malignant Neoplasm    47/196 1158/16666
umls:C1458155 umls:C1458155             Breast Neoplasms    60/196 1981/16666
umls:C0600139 umls:C0600139           prostate carcinoma    56/196 2033/16666
                    pvalue     p.adjust       qvalue
umls:C0006142 4.934860e-16 9.845045e-13 8.249008e-13
umls:C0006826 3.071791e-15 3.064112e-12 2.567371e-12
umls:C0678222 5.894907e-15 3.920113e-12 3.284601e-12
umls:C1458156 3.230248e-14 1.611086e-11 1.349904e-11
umls:C1458155 1.724317e-12 6.880024e-10 5.764664e-10
umls:C0600139 5.025005e-10 1.670814e-07 1.399949e-07
geneID
umls:C0006142                                                                                                                                    4312/10874/991/6280/2305/9493/1062/4605/9833/9133/6279/10403/8685/597/7153/6278/259266/3627/27074/6241/7368/11065/55355/9582/55872/51203/3669/22974/10460/10563/4751/820/27338/890/983/4085/6362/9837/5918/332/3832/6286/5163/2146/3002/50852/7272/2568/9212/51659/1111/9055/4321/3620/6790/891/4174/9232/9370/1602/4629/771/3117/80129/23158/125/1311/5174/4250/2167/652/4036/4137/8839/2066/4693/3158/3169/1408/9547/2922/10647/5304/8614/2625/7802/9/5241/10551
umls:C0006826 4312/10874/55388/991/6280/2305/1062/3868/4605/9833/6279/10403/597/7153/6278/79733/3627/27074/6241/55165/9787/7368/11065/9582/55872/51203/3669/83461/22974/10460/10563/4751/6373/8140/1844/4283/27299/27338/890/9415/983/10232/4085/6362/5080/5918/81620/332/3832/6286/5163/2146/3002/50852/7272/2568/2842/9212/8715/1111/9055/3833/4321/11182/10112/3902/3620/3887/51514/6790/4521/891/8544/24137/10578/9232/9370/1602/3708/9122/10699/4629/771/3117/23158/125/4958/1311/2018/1308/4250/652/80736/4036/8839/2066/4693/3169/1408/9547/2922/1524/1580/10647/5304/8614/2625/7802/11122/9/5241/10551/4969
umls:C0678222                                                                                                                                                                    4312/10874/6280/2305/4605/9833/9133/6279/10403/8685/597/7153/6278/259266/3627/27074/6241/55165/11065/55355/9582/55872/51203/3669/10563/4751/820/27338/890/983/4085/6362/9837/5918/332/6286/5163/2146/3002/50852/7272/2568/9212/1111/9055/4321/3620/6790/891/9232/9370/1602/3708/4629/771/3117/23158/125/1311/5174/2532/4250/2167/652/4036/4137/8839/2066/4693/3158/3169/9547/2922/1524/10647/5304/8614/2625/7021/7802/9/5241/10551
umls:C1458156                                                                                                                                                                                                                                                                                                                                                           4312/991/6280/6279/8685/7153/6278/259266/3627/27074/6241/55165/9787/3669/22974/983/10232/4085/5080/332/2146/3002/50852/2568/9212/4321/3620/3887/6790/891/4174/9232/3708/4629/771/3117/23158/730/2018/4036/2066/9547/2625/9/5241/10551/57758
umls:C1458155                                                                                                                                                                                                                                                                                        4312/10874/2305/4605/9833/9133/10403/597/7153/6278/259266/3627/11065/9582/3669/10563/8140/820/1844/27338/890/9415/983/81620/332/2146/3002/2568/9212/51659/1111/9055/11182/3620/51514/6790/4521/891/8544/9232/9370/1602/771/23158/125/4250/2167/652/8839/2066/3169/10647/5304/8614/2625/7021/9/5241/10551/57758
umls:C0600139                                                                                                                                                                                                                                                                                                           4312/6280/2305/4605/9833/6279/7153/3627/6241/55165/11065/22974/10563/8140/1844/890/983/5080/5918/6286/5163/2146/9212/1111/4321/3620/6790/891/8544/9232/9370/8857/1602/3708/23090/4629/3117/23158/2532/2167/652/80736/4036/3169/9547/2922/11283/1524/5304/8614/2625/79689/11122/9/5241/10551
              Count
umls:C0006142    89
umls:C0006826   113
umls:C0678222    83
umls:C1458156    47
umls:C1458155    60
umls:C0600139    56
&amp;gt; 
&amp;gt; barplot(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/855c87b1b1387307a5dbd93f233957e7a37e7d30/2015/DisGeNET_barplot.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;&amp;gt; y = GSEA(geneList, TERM2GENE=disease2gene, TERM2NAME=disease2name)
&amp;gt; head(summary(y))
                         ID           Description setSize enrichmentScore
umls:C0001418 umls:C0001418        Adenocarcinoma    1224       0.2431172
umls:C0001973 umls:C0001973            Alcoholism     548      -0.3213479
umls:C0002171 umls:C0002171       Alopecia Areata      74       0.5122605
umls:C0003864 umls:C0003864             Arthritis     447       0.3140411
umls:C0003872 umls:C0003872  Arthritis, Psoriatic     122       0.4311280
umls:C0003873 umls:C0003873 Arthritis, Rheumatoid    1186       0.2855594
              pvalue p.adjust qvalues
umls:C0001418      0        0       0
umls:C0001973      0        0       0
umls:C0002171      0        0       0
umls:C0003864      0        0       0
umls:C0003872      0        0       0
umls:C0003873      0        0       0

&amp;gt; gseaplot(y, &amp;quot;umls:C0003872&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/DisGeNET_gseaplot.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ggtree updating a tree view using %&lt;% operator</title>
      <link>http://guangchuangyu.github.io/2015/02/ggtree-updating-a-tree-view-using--operator/</link>
      <pubDate>Tue, 10 Feb 2015 02:58:23 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/02/ggtree-updating-a-tree-view-using--operator/</guid>
      <description>&lt;p&gt;I am very exciting that I have received very positive feedback from
&lt;a href=&#34;https://twitter.com/AhmedMoustafa&#34;&gt;Ahmed Moustafa&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/sdwfrost&#34;&gt;Simon
Frost&lt;/a&gt;.
&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot-2015-02-10-10.27.27.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot-2015-02-10-10.27.07.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;https://github.com/GuangchuangYu/ggtree&#34;&gt;ggtree&lt;/a&gt; now has equipped with
a lot of new features. This time, I would like to introduce the replace
operator, &lt;code&gt;%&amp;lt;%&lt;/code&gt;. Suppose we have build a tree view using ggtree with
multiple layers, we don&amp;rsquo;t need to run the code again to build a new tree
view with another tree. In
&lt;a href=&#34;https://github.com/GuangchuangYu/ggtree&#34;&gt;ggtree&lt;/a&gt;, we provides an
operator, &lt;code&gt;%&amp;lt;%&lt;/code&gt;, for updating tree view.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;library(ggplot2)
library(ggtree)
ggtree(rtree(15)) %&amp;lt;% rtree(30)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot-2015-02-10-10.22.07.png&#34; alt=&#34;&#34; /&gt;
It supports different layout.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;ggtree(rtree(15), layout=&amp;quot;unrooted&amp;quot;, ladderize=FALSE) %&amp;lt;% rtree(45)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot-2015-02-10-10.23.48.png&#34; alt=&#34;&#34; /&gt;
It is chainable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;ggtree(rtree(15), layout=&amp;quot;cladogram&amp;quot;, ladderize=FALSE) %&amp;lt;% 
    rtree(30) %&amp;lt;% 
       rtree(45)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot-2015-02-10-10.23.14.png&#34; alt=&#34;&#34; /&gt;
It also supports multiple layers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;(ggtree(rtree(15), layout=&amp;quot;fan&amp;quot;) + 
    geom_point(aes(shape=isTip, color=isTip))) %&amp;lt;% 
      rtree(40)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot-2015-02-10-10.25.31.png&#34; alt=&#34;&#34; /&gt;
In the final example, we parse rst file from BaseML output and annotate
the tree with marginal_AA_subs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;rstfile &amp;lt;- system.file(&amp;quot;extdata/PAML_Baseml&amp;quot;, &amp;quot;rst&amp;quot;, package=&amp;quot;ggtree&amp;quot;)
tipfas &amp;lt;- system.file(&amp;quot;extdata&amp;quot;, &amp;quot;pa.fas&amp;quot;, package=&amp;quot;ggtree&amp;quot;)
rst &amp;lt;- read.paml_rst(rstfile, tipfas)

p &amp;lt;- plot(rst, annotation=&amp;quot;marginal_AA_subs&amp;quot;, annotation.color=&amp;quot;steelblue&amp;quot;)
print(p)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot-2015-02-10-10.51.17.png&#34; alt=&#34;&#34; /&gt;
We have ancestral sequences inferred from CodeML with the same tree. We
can use this new data to update the tree view.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;rstfile &amp;lt;- system.file(&amp;quot;extdata/PAML_Codeml&amp;quot;, &amp;quot;rst&amp;quot;, package=&amp;quot;ggtree&amp;quot;)
rst &amp;lt;- read.paml_rst(rstfile, tipfas)
p %&amp;lt;% rst
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot-2015-02-10-10.53.41.png&#34; alt=&#34;&#34; /&gt;
In these two figures, we can found that they have different evolution
distances, and substitutions inferred from BASEML and CODEML are
slightly different.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ggtree in Bioconductor 3.1</title>
      <link>http://guangchuangyu.github.io/2015/01/ggtree-in-bioconductor-3.1/</link>
      <pubDate>Mon, 19 Jan 2015 03:50:23 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/01/ggtree-in-bioconductor-3.1/</guid>
      <description>&lt;p&gt;I am very glad that &lt;a href=&#34;http://guangchuangyu.github.io/2014/12/ggtree/&#34;&gt;ggtree&lt;/a&gt; is now
available via Bioconductor. This is my 6th Bioconductor package.
&lt;a href=&#34;http://guangchuangyu.github.io/2014/12/ggtree/&#34;&gt;ggtree&lt;/a&gt; now supports parsing output
files from BEAST, PAML, HYPHY, EPA and PPLACER and can annotate
phylogenetic tree directly using plot methods. Now you can use the
following
&lt;a href=&#34;http://guangchuangyu.github.io/2014/12/ggtree/&#34;&gt;command&lt;/a&gt; to
install ggtree:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;install.packages(&amp;quot;ggtree&amp;quot;,
                 repos = &amp;quot;http://www.bioconductor.org/packages/devel/bioc&amp;quot;,
                 type  = &amp;quot;source&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find out more at
&lt;a href=&#34;http://www.bioconductor.org/packages/3.1/bioc/html/ggtree.html&#34;&gt;http://www.bioconductor.org/packages/3.1/bioc/html/ggtree.html&lt;/a&gt; and
check out the vignette,
&lt;a href=&#34;http://www.bioconductor.org/packages/3.1/bioc/vignettes/ggtree/inst/doc/ggtree.html&#34;&gt;http://www.bioconductor.org/packages/3.1/bioc/vignettes/ggtree/inst/doc/ggtree.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>viewing and annotating phylogenetic tree with ggtree</title>
      <link>http://guangchuangyu.github.io/2014/12/viewing-and-annotating-phylogenetic-tree-with-ggtree/</link>
      <pubDate>Sun, 21 Dec 2014 08:00:08 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2014/12/viewing-and-annotating-phylogenetic-tree-with-ggtree/</guid>
      <description>&lt;p&gt;When I need to annotate nucleotide substitutions in the phylogenetic
tree, I found that all the software are designed to display the tree but
not annotating it. Some of them may support annotating the tree with
specific data such as bootstrap values, but they are restricted to a few
supported data types. It is hard/impossible to inject user specific
data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/12/2014-12-21-145753_579x436_scrot.png&#34; alt=&#34;&#34; /&gt;
I decided to implement my own one by extending the ggplot2 package.
There are other R packages that implemented tree viewer using ggplot2,
including OutbreakTools, phyloseq and ggphylo, but all of them only
create complex tree view function for their specific needs. They are
just classical tree viewers that only viewing the tree or annotating a
specific data type. The good parts of ggplot2 are not available in these
packages. They lack of flexibilities of annotating phylogenetic tree by
diverse user inputs. I develop ggtree, which is based on grammar of
graphics and will takes all the good parts of ggplot2.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;nwk &amp;lt;- system.file(&amp;quot;extdata&amp;quot;, &amp;quot;sample.nwk&amp;quot;, package = &amp;quot;ggtree&amp;quot;)
library(ape)
tree &amp;lt;- read.tree(nwk)
library(ggplot2)
library(ggtree)
ggplot(tree, aes(x, y)) + geom_tree() + theme_tree() + xlab(&amp;quot;&amp;quot;) + ylab(&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It extends ggplot2 to support tree objects and implements a geom_tree()
layer to draw the tree.&lt;/p&gt;

&lt;p&gt;The ggtree package provides a function, ggtree, for shortcut of
&lt;code&gt;ggplot()+geom_tree()+theme_tree()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It supports several tree objects including phylo that defined in ape,
phylo4 that defined in phylobase and jplace that defined within the
ggtree package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;p1 &amp;lt;- ggtree(tree) + ggtitle(&amp;quot;tree of phylo object&amp;quot;)
tr2 &amp;lt;- as(tree, &amp;quot;phylo4&amp;quot;)
p2 &amp;lt;- ggtree(tr2) + ggtitle(&amp;quot;tree of phylo4 object&amp;quot;)
jpf &amp;lt;- system.file(&amp;quot;extdata&amp;quot;, &amp;quot;sample.jplace&amp;quot;, package=&amp;quot;ggtree&amp;quot;)
jp &amp;lt;- read.jplace(jpf)
p3 &amp;lt;- ggtree(jp) + ggtitle(&amp;quot;tree of jplace object&amp;quot;)
library(gridExtra)
grid.arrange(p1, p2, p3, ncol=3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/12/tree_objects.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With this implementation, it is possible to inject user input. But is it
easy? The answer is yes and no. It may depends on user&amp;rsquo;s ggplot2
experiences. To place the input data at the correct position, you should
know how the tree was layout. It may be easy for an experienced user,
but hard for newbie. Most of us are impatient and reluctant to learn, so
I should create a way that is easy to follow. It&amp;rsquo;s not a good idea to
implement unnecessary geom_XXX layer, for it violates the great idea of
taking all the good parts of ggplot2, and it will violate the consistent
function calls of &lt;code&gt;geom_XXX&lt;/code&gt;. Thanks to my sleep disorder, I came out
with an operator &lt;strong&gt;&lt;code&gt;%&amp;lt;+%&lt;/code&gt;&lt;/strong&gt; for injecting input data to the tree view.
After the injection, the data is visible to all the geom_XXX layers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;p &amp;lt;- ggtree(tree)

print(dd)
taxa    place   value
M   NA  55.9
A   GZ  65.6
C   GZ  59.3
I   CZ  78.5
E   GZ  62.9
D   GZ  64.1
J   CZ  62.3
K   CZ  79.1
B   GZ  89.0
L   CZ  57.1
G   HK  66.4
H   HK  61.6
F   HK  59.9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suppose we have a tree view p, and input data dd, we can attach the data
to the tree and add a layer of tip labels and colored by place.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;p &amp;lt;- p %&amp;lt;+% dd + geom_text(aes(color=place, label=label), hjust=-0.5)
print(p)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/12/tree_place.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once the data is attached, it is always attached, and we can add more
layers easily.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;p + geom_text(aes(color=place, label=place), hjust=1, vjust=-0.4, size=3) +
  geom_text(aes(color=place, label=value), hjust=1, vjust=1.4, size=3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/12/tree_place2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The package is now available via github,
&lt;a href=&#34;https://github.com/GuangchuangYu/ggtree&#34;&gt;https://github.com/GuangchuangYu/ggtree&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Suggestions, comments and feature request are all welcome. Let&amp;rsquo;s make it
an easy to use and feature-riched package for viewing and annotating
phylogenetic trees.&lt;/p&gt;

&lt;p&gt;At last, wish you a merry christmas :)
&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/12/IMG_5755.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>proper use of GOSemSim</title>
      <link>http://guangchuangyu.github.io/2014/11/proper-use-of-gosemsim/</link>
      <pubDate>Sun, 23 Nov 2014 02:27:23 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2014/11/proper-use-of-gosemsim/</guid>
      <description>&lt;p&gt;One day, I am looking for R packages that can analyze PPI and after
searching, I found the
&lt;a href=&#34;http://cran.r-project.org/web/packages/ppiPre/index.html&#34;&gt;ppiPre&lt;/a&gt;
package in CRAN.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/11/2014-11-22-215959_895x256_scrot.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The function of this package is not impressive, and I already knew some
related works, including &lt;a href=&#34;http://intscore.molgen.mpg.de/&#34;&gt;http://intscore.molgen.mpg.de/&lt;/a&gt;. The authors
of this webserver contacted me for the usages of GOSemSim when they
developing it. What makes me curious is that the
&lt;a href=&#34;http://cran.r-project.org/web/packages/ppiPre/index.html&#34;&gt;ppiPre&lt;/a&gt;
package can calculate GO semantic similarity and supports 20 species
exactly like GOSemSim. I opened the source tarball, and surprisingly
found that its sources related to semantic similarity calculation are
totally copied from GOSemSim.&lt;/p&gt;

&lt;p&gt;GOSemSim was &lt;a href=&#34;http://guangchuangyu.github.io/2008/08/gosemsim/&#34;&gt;firstly released in 2008 Bioconductor
2.4&lt;/a&gt; (at that time, devel version)
and published in &lt;a href=&#34;http://guangchuangyu.github.io/2010/05/gosemsim-an-r-package-for-measuring-semantic-similarity-among-go-terms-and-gene-products/&#34;&gt;Bioinformatics in
2010&lt;/a&gt;.
After compared the sources, I found the sources in ppiPre were copied
from &lt;a href=&#34;http://www.bioconductor.org/packages/2.6/bioc/html/GOSemSim.html&#34;&gt;GOSemSim version
1.6.8&lt;/a&gt;
which released in 2010 Bioconductor 2.6. The Wang method defined in
GOKEGGSims.r file of ppiPre is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   119  WangMethod &amp;lt;- function(GOID1, GOID2, ont=&amp;quot;MF&amp;quot;, organism=&amp;quot;yeast&amp;quot;) {
   120      if(!exists(&amp;quot;ppiPreEnv&amp;quot;)) .initial()
   121      weight.isa = 0.8
   122      weight.partof = 0.6
   123
   124      if (GOID1 == GOID2)
   125          return (1)
   126
   127      Parents.name &amp;lt;- switch(ont,
   128          MF = &amp;quot;MFParents&amp;quot;,
   129          BP = &amp;quot;BPParents&amp;quot;,
   130          CC = &amp;quot;CCParents&amp;quot;
   131      )
   132      if (!exists(Parents.name, envir=ppiPreEnv)) {
   133          GetGOParents(ont)
   134      }
   135      Parents &amp;lt;- get(Parents.name, envir=ppiPreEnv)
   136
   137      sv.a &amp;lt;- 1
   138      sv.b &amp;lt;- 1
   139      sw &amp;lt;- 1
   140      names(sv.a) &amp;lt;- GOID1
   141      names(sv.b) &amp;lt;- GOID2
   142
   143      sv.a &amp;lt;- WangSemVal(GOID1, ont, Parents, sv.a, sw, weight.isa, weight.partof)
   144      sv.b &amp;lt;- WangSemVal(GOID2, ont, Parents, sv.b, sw, weight.isa, weight.partof)
   145
   146      sv.a &amp;lt;- uniqsv(sv.a)
   147      sv.b &amp;lt;- uniqsv(sv.b)
   148
   149      idx &amp;lt;- intersect(names(sv.a), names(sv.b))
   150      inter.sva &amp;lt;- unlist(sv.a[idx])
   151      inter.svb &amp;lt;- unlist(sv.b[idx])
   152      sim &amp;lt;- sum(inter.sva,inter.svb) / sum(sv.a, sv.b)
   153      return(sim)
   154  }
   155  WangSemVal &amp;lt;- function(goid, ont, Parents, sv, w, weight.isa, weight.partof) {
   156      if(!exists(&amp;quot;ppiPreCache&amp;quot;))
   157          return(WangSemVal_internal(goid, ont, Parents, sv, w, weight.isa, weight.partof))
   158      goid.ont &amp;lt;- paste(goid, ont, sep=&amp;quot;.&amp;quot;)
   159      if (!exists(goid.ont, envir=ppiPreCache)) {
   160          value &amp;lt;- WangSemVal_internal(goid, ont, Parents, sv, w, weight.isa, weight.partof)
   161          assign(eval(goid.ont), value, envir=ppiPreCache)
   162      }
   163      return(get(goid.ont, envir=ppiPreCache))
   164  }
   165
   166  WangSemVal_internal &amp;lt;- function(goid, ont, Parents, sv, w, weight.isa, weight.partof) {
   167      p &amp;lt;- Parents[goid]
   168      p &amp;lt;- unlist(p[[1]])
   169      if (length(p) == 0) {
   170          return(0)
   171      }
   172      relations &amp;lt;- names(p)
   173      old.w &amp;lt;- w
   174      for (i in 1:length(p)) {
   175          if (relations[i] == &amp;quot;is_a&amp;quot;) {
   176              w &amp;lt;- old.w * weight.isa
   177          } else {
   178              w &amp;lt;- old.w * weight.partof
   179          }
   180          names(w) &amp;lt;- p[i]
   181          sv &amp;lt;- c(sv,w)
   182          if (p[i] != &amp;quot;all&amp;quot;) {
   183              sv &amp;lt;- WangSemVal_internal(p[i], ont, Parents, sv, w, weight.isa, weight.partof)
   184          }
   185      }
   186      return (sv)
   187  }
   188
   189  uniqsv &amp;lt;- function(sv) {
   190      sv &amp;lt;- unlist(sv)
   191      una &amp;lt;- unique(names(sv))
   192      sv &amp;lt;- unlist(sapply(una, function(x) {max(sv[names(sv)==x])}))
   193      return (sv)
   194  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is identical to the one I defined in GOSemSim 1.6.8:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   196  ygcWangMethod &amp;lt;- function(GOID1, GOID2, ont=&amp;quot;MF&amp;quot;, organism=&amp;quot;human&amp;quot;) {
   197      if(!exists(&amp;quot;GOSemSimEnv&amp;quot;)) .initial()
   198      weight.isa = 0.8
   199      weight.partof = 0.6
   200
   201      if (GOID1 == GOID2)
   202          return (gosim=1)
   203
   204      Parents.name &amp;lt;- switch(ont,
   205          MF = &amp;quot;MFParents&amp;quot;,
   206          BP = &amp;quot;BPParents&amp;quot;,
   207          CC = &amp;quot;CCParents&amp;quot;
   208      )
   209      if (!exists(Parents.name, envir=GOSemSimEnv)) {
   210          ygcGetParents(ont)
   211      }
   212      Parents &amp;lt;- get(Parents.name, envir=GOSemSimEnv)
   213
   214      sv.a &amp;lt;- 1
   215      sv.b &amp;lt;- 1
   216      sw &amp;lt;- 1
   217      names(sv.a) &amp;lt;- GOID1
   218      names(sv.b) &amp;lt;- GOID2
   219
   220      sv.a &amp;lt;- ygcSemVal(GOID1, ont, Parents, sv.a, sw, weight.isa, weight.partof)
   221      sv.b &amp;lt;- ygcSemVal(GOID2, ont, Parents, sv.b, sw, weight.isa, weight.partof)
   222
   223      sv.a &amp;lt;- uniqsv(sv.a)
   224      sv.b &amp;lt;- uniqsv(sv.b)
   225
   226      idx &amp;lt;- intersect(names(sv.a), names(sv.b))
   227      inter.sva &amp;lt;- unlist(sv.a[idx])
   228      inter.svb &amp;lt;- unlist(sv.b[idx])
   229      sim &amp;lt;- sum(inter.sva,inter.svb) / sum(sv.a, sv.b)
   230      return(sim)
   231  }
   232
   233
   234
   235  uniqsv &amp;lt;- function(sv) {
   236      sv &amp;lt;- unlist(sv)
   237      una &amp;lt;- unique(names(sv))
   238      sv &amp;lt;- unlist(sapply(una, function(x) {max(sv[names(sv)==x])}))
   239      return (sv)
   240  }
   241
   242  ygcSemVal_internal &amp;lt;- function(goid, ont, Parents, sv, w, weight.isa, weight.partof) {
   243      p &amp;lt;- Parents[goid]
   244      p &amp;lt;- unlist(p[[1]])
   245      if (length(p) == 0) {
   246          #warning(goid, &amp;quot; may not belong to Ontology &amp;quot;, ont)
   247          return(0)
   248      }
   249      relations &amp;lt;- names(p)
   250      old.w &amp;lt;- w
   251      for (i in 1:length(p)) {
   252          if (relations[i] == &amp;quot;is_a&amp;quot;) {
   253              w &amp;lt;- old.w * weight.isa
   254          } else {
   255              w &amp;lt;- old.w * weight.partof
   256          }
   257          names(w) &amp;lt;- p[i]
   258          sv &amp;lt;- c(sv,w)
   259          if (p[i] != &amp;quot;all&amp;quot;) {
   260              sv &amp;lt;- ygcSemVal_internal(p[i], ont, Parents, sv, w, weight.isa, weight.partof)
   261          }
   262      }
   263      return (sv)
   264  }
   265
   266  ygcSemVal &amp;lt;- function(goid, ont, Parents, sv, w, weight.isa, weight.partof) {
   267      if(!exists(&amp;quot;GOSemSimCache&amp;quot;)) return(ygcSemVal_internal(goid, ont, Parents, sv, w, weight.isa, weight.partof))
   268      goid.ont &amp;lt;- paste(goid, ont, sep=&amp;quot;.&amp;quot;)
   269      if (!exists(goid.ont, envir=GOSemSimCache)) {
   270          value &amp;lt;- ygcSemVal_internal(goid, ont, Parents, sv, w, weight.isa, weight.partof)
   271          assign(goid.ont, value, envir=GOSemSimCache)
   272          #cat(&amp;quot;recompute &amp;quot;, goid, value, &amp;quot;\n&amp;quot;)
   273      }
   274      else{
   275          #cat(&amp;quot;cache &amp;quot;, goid, get(goid, envir=GOSemSimCache), &amp;quot;\n&amp;quot;)
   276      }
   277      return(get(goid.ont, envir=GOSemSimCache))
   278  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The information content based method in ppiPre:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   495  GetLatestCommonAncestor&amp;lt;-function(GOID1, GOID2, ont, organism){
   496  #message(&amp;quot;Calulating Latest Common Ancestor...&amp;quot;)
   497      if(!exists(&amp;quot;ppiPreEnv&amp;quot;)) .initial()
   498
   499      fname &amp;lt;- paste(&amp;quot;Info_Contents&amp;quot;, ont, organism, sep=&amp;quot;_&amp;quot;)
   500      tryCatch(utils::data(list=fname, package=&amp;quot;ppiPre&amp;quot;, envir=ppiPreEnv))
   501      InfoContents &amp;lt;- get(&amp;quot;IC&amp;quot;, envir=ppiPreEnv)
   502
   503      rootCount &amp;lt;- max(InfoContents[InfoContents != Inf])
   504      InfoContents[&amp;quot;all&amp;quot;] = 0
   505      p1 &amp;lt;- InfoContents[GOID1]/rootCount
   506      p2 &amp;lt;- InfoContents[GOID2]/rootCount
   507      if(is.na(p1) || is.na(p2)) return (NA)
   508      if (p1 == 0 || p2 == 0) return (NA)
   509      Ancestor.name &amp;lt;- switch(ont,MF = &amp;quot;MFAncestors&amp;quot;,BP = &amp;quot;BPAncestors&amp;quot;,CC = &amp;quot;CCAncestors&amp;quot;)
   510      if (!exists(Ancestor.name, envir=ppiPreEnv)) {
   511          TCSSGetAncestors(ont)
   512      }
   513
   514      Ancestor &amp;lt;- get(Ancestor.name, envir=ppiPreEnv)
   515      ancestor1 &amp;lt;- unlist(Ancestor[GOID1])
   516      ancestor2 &amp;lt;- unlist(Ancestor[GOID2])
   517      if (GOID1 == GOID2) {
   518          commonAncestor &amp;lt;- GOID1
   519      } else if (GOID1 %in% ancestor2) {
   520          commonAncestor &amp;lt;- GOID1
   521      } else if (GOID2 %in% ancestor1) {
   522          commonAncestor &amp;lt;- GOID2
   523      } else {
   524          commonAncestor &amp;lt;- intersect(ancestor1, ancestor2)
   525      }
   526      if (length(commonAncestor) == 0)
   527          LCA&amp;lt;-NULL
   528      max&amp;lt;- -100
   529      LCA&amp;lt;-NULL
   530      for(a in commonAncestor){
   531          if(!is.na(InfoContents[a])) {
   532              if(InfoContents[a]&amp;gt;max){
   533                  max&amp;lt;-InfoContents[a]
   534                  LCA&amp;lt;-a
   535              }
   536          }
   537      }
   538  #message(&amp;quot;done...&amp;quot;)
   539      return (LCA)
   540
   541  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;also identical to the one in GOSemSim 1.6.8:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   280  `ygcInfoContentMethod` &amp;lt;- function(GOID1, GOID2, ont, measure, organism) {
   281      if(!exists(&amp;quot;GOSemSimEnv&amp;quot;)) .initial()
   282      fname &amp;lt;- paste(&amp;quot;Info_Contents&amp;quot;, ont, organism, sep=&amp;quot;_&amp;quot;)
   283      tryCatch(utils::data(list=fname, package=&amp;quot;GOSemSim&amp;quot;, envir=GOSemSimEnv))
   284      Info.contents &amp;lt;- get(&amp;quot;IC&amp;quot;, envir=GOSemSimEnv)
   285
   286      rootCount &amp;lt;- max(Info.contents[Info.contents != Inf])
   287      Info.contents[&amp;quot;all&amp;quot;] = 0
   288      p1 &amp;lt;- Info.contents[GOID1]/rootCount
   289      p2 &amp;lt;- Info.contents[GOID2]/rootCount
   290
   291      if (p1 == 0 || p2 == 0) return (NA)
   292      Ancestor.name &amp;lt;- switch(ont,
   293          MF = &amp;quot;MFAncestors&amp;quot;,
   294          BP = &amp;quot;BPAncestors&amp;quot;,
   295          CC = &amp;quot;CCAncestors&amp;quot;
   296      )
   297      if (!exists(Ancestor.name, envir=GOSemSimEnv)) {
   298          ygcGetAncestors(ont)
   299      }
   300
   301      Ancestor &amp;lt;- get(Ancestor.name, envir=GOSemSimEnv)
   302      ancestor1 &amp;lt;- unlist(Ancestor[GOID1])
   303      ancestor2 &amp;lt;- unlist(Ancestor[GOID2])
   304      if (GOID1 == GOID2) {
   305          commonAncestor &amp;lt;- GOID1
   306      } else if (GOID1 %in% ancestor2) {
   307          commonAncestor &amp;lt;- GOID1
   308      } else if (GOID2 %in% ancestor1) {
   309          commonAncestor &amp;lt;- GOID2
   310      } else {
   311          commonAncestor &amp;lt;- intersect(ancestor1, ancestor2)
   312      }
   313      if (length(commonAncestor) == 0) return (NA)
   314      pms &amp;lt;- max(Info.contents[commonAncestor], na.rm=TRUE)/rootCount
   315      sim&amp;lt;-switch(measure,
   316          Resnik = pms,
   317          Lin = pms/(p1+p2),
   318          Jiang = 1 - min(1, -2*pms + p1 + p2),
   319          Rel = 2*pms/(p1+p2)*(1-exp(-pms*rootCount))
   320      )
   321      return (sim)
   322  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s look at some helper functions in ppiPre:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   477  rebuildICdata &amp;lt;- function(){
   478      ont &amp;lt;- c(&amp;quot;MF&amp;quot;,&amp;quot;CC&amp;quot;, &amp;quot;BP&amp;quot;)
   479      species &amp;lt;- c(&amp;quot;human&amp;quot;, &amp;quot;rat&amp;quot;, &amp;quot;mouse&amp;quot;, &amp;quot;fly&amp;quot;, &amp;quot;yeast&amp;quot;, &amp;quot;zebrafish&amp;quot;, &amp;quot;arabidopsis&amp;quot;,&amp;quot;worm&amp;quot;, &amp;quot;ecolik12&amp;quot;, &amp;quot;bovine&amp;quot;,&amp;quot;canine&amp;quot;,&amp;quot;anopheles&amp;quot;,&amp;quot;ecsakai&amp;quot;,&amp;quot;chicken&amp;quot;,&amp;quot;chimp&amp;quot;,&amp;quot;malaria&amp;quot;,&amp;quot;rhesus&amp;quot;,&amp;quot;pig&amp;quot;,&amp;quot;xenopus&amp;quot;,&amp;quot;coelicolor&amp;quot;)
   480      cat(&amp;quot;------------------------------------\n&amp;quot;)
   481      cat(&amp;quot;calulating Information Content...\nSpecies:\t\tOntology\n&amp;quot;)
   482      for (i in ont) {
   483          for (j in species) {
   484              cat(j)
   485              cat(&amp;quot;\t\t\t&amp;quot;)
   486              cat(i)
   487              cat(&amp;quot;\n&amp;quot;)
   488              TCSSComputeIC(ont=i, organism=j)
   489          }
   490      }
   491      cat(&amp;quot;------------------------------------\n&amp;quot;)
   492      message(&amp;quot;done...&amp;quot;)
   493  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, it is identical to GOSemSim 1.6.8:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   390  rebuildICdata &amp;lt;- function(){
   391      ont &amp;lt;- c(&amp;quot;MF&amp;quot;,&amp;quot;CC&amp;quot;, &amp;quot;BP&amp;quot;)
   392      species &amp;lt;- c(&amp;quot;human&amp;quot;, &amp;quot;rat&amp;quot;, &amp;quot;mouse&amp;quot;, &amp;quot;fly&amp;quot;, &amp;quot;yeast&amp;quot;, &amp;quot;zebrafish&amp;quot;, &amp;quot;arabidopsis&amp;quot;,&amp;quot;worm&amp;quot;, &amp;quot;ecolik12&amp;quot;, &amp;quot;bovine&amp;quot;,&amp;quot;canine&amp;quot;,&amp;quot;anopheles&amp;quot;,&amp;quot;ecsakai&amp;quot;,&amp;quot;chicken&amp;quot;,&amp;quot;chimp&amp;quot;,&amp;quot;malaria&amp;quot;,&amp;quot;rhesus&amp;quot;,&amp;quot;pig&amp;quot;,&amp;quot;xenopus&amp;quot;)
   393      cat(&amp;quot;------------------------------------\n&amp;quot;)
   394      cat(&amp;quot;calulating Information Content...\nSpecies:\t\tOntology\n&amp;quot;)
   395      for (i in ont) {
   396          for (j in species) {
   397              cat(j)
   398              cat(&amp;quot;\t\t\t&amp;quot;)
   399              cat(i)
   400              cat(&amp;quot;\n&amp;quot;)
   401              ygcCompute_Information_Content(ont=i, organism=j)
   402          }
   403      }
   404      cat(&amp;quot;------------------------------------\n&amp;quot;)
   405      print(&amp;quot;done...&amp;quot;)
   406  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s look at the internal function TCSSComputeIC in ppiPre:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   410  TCSSComputeIC &amp;lt;- function(dropCodes=&amp;quot;IEA&amp;quot;, ont, organism) {
   411  message(&amp;quot;Calulating IC...&amp;quot;)
   412      wh_ont &amp;lt;- match.arg(ont, c(&amp;quot;MF&amp;quot;, &amp;quot;BP&amp;quot;, &amp;quot;CC&amp;quot;))
   413      wh_organism &amp;lt;- match.arg(organism, c(&amp;quot;human&amp;quot;, &amp;quot;fly&amp;quot;, &amp;quot;mouse&amp;quot;, &amp;quot;rat&amp;quot;, &amp;quot;yeast&amp;quot;, &amp;quot;zebrafish&amp;quot;, &amp;quot;worm&amp;quot;, &amp;quot;arabidopsis&amp;quot;, &amp;quot;ecolik12&amp;quot;, &amp;quot;bovine&amp;quot;,&amp;quot;canine&amp;quot;,&amp;quot;anopheles&amp;quot;,&amp;quot;ecsakai&amp;quot;,&amp;quot;chicken&amp;quot;,&amp;quot;chimp&amp;quot;,&amp;quot;malaria&amp;quot;,&amp;quot;rhesus&amp;quot;,&amp;quot;pig&amp;quot;,&amp;quot;xenopus&amp;quot;, &amp;quot;coelicolor&amp;quot;))
   414      CheckAnnotationPackage(wh_organism)
   415      gomap &amp;lt;- switch(organism,
   416          human = org.Hs.egGO,
   417          fly = org.Dm.egGO,
   418          mouse = org.Mm.egGO,
   419          rat = org.Rn.egGO,
   420          yeast = org.Sc.sgdGO,
   421          zebrafish = org.Dr.egGO,
   422          worm = org.Ce.egGO,
   423          arabidopsis = org.At.tairGO,
   424          ecoli = org.EcK12.egGO,
   425          bovine  = org.Bt.egGO,
   426          canine  = org.Cf.egGO,
   427          anopheles   =   org.Ag.egGO,
   428          ecsakai =   org.EcSakai.egGO,
   429          chicken =   org.Gg.egGO,
   430          chimp   =   org.Pt.egGO,
   431          malaria =   org.Pf.plasmoGO,
   432          rhesus  =   org.Mmu.egGO,
   433          pig = org.Ss.egGO,
   434          xenopus =   org.Xl.egGO,
   435          coelicolor  =   org.Sco.egGO
   436      )
   437
   438      mapped_genes &amp;lt;- mappedkeys(gomap)
   439      gomap = AnnotationDbi::as.list(gomap[mapped_genes])
   440      if (!is.null(dropCodes)){
   441          gomap&amp;lt;-sapply(gomap,function(x) sapply(x,function(y) c(y$Evidence %in% dropCodes, y$Ontology %in% wh_ont)))
   442          gomap&amp;lt;-sapply(gomap, function(x) x[2,x[1,]==&amp;quot;FALSE&amp;quot;])
   443          gomap&amp;lt;-gomap[sapply(gomap,length) &amp;gt;0]
   444      }else {
   445          gomap &amp;lt;- sapply(gomap,function(x) sapply(x,function(y) y$Ontology %in% wh_ont))
   446      }
   447
   448      goterms&amp;lt;-unlist(sapply(gomap, function(x) names(x)), use.names=FALSE) # all GO terms appearing in an annotation
   449      goids &amp;lt;- toTable(GOTERM)
   450
   451      goids &amp;lt;- unique(goids[goids[,&amp;quot;Ontology&amp;quot;] == wh_ont, &amp;quot;go_id&amp;quot;])
   452      gocount &amp;lt;- table(goterms)
   453      goname &amp;lt;- names(gocount) #goid of specific organism and selected category.
   454
   455      go.diff &amp;lt;- setdiff(goids, goname)
   456      m &amp;lt;- double(length(go.diff))
   457      names(m) &amp;lt;- go.diff
   458      gocount &amp;lt;- as.vector(gocount)
   459      names(gocount) &amp;lt;- goname
   460      gocount &amp;lt;- c(gocount, m)
   461
   462      Offsprings.name &amp;lt;- switch(wh_ont,
   463          MF = &amp;quot;MFOffsprings&amp;quot;,
   464          BP = &amp;quot;BPOffsprings&amp;quot;,
   465          CC = &amp;quot;CCOffsprings&amp;quot;
   466      )
   467      if (!exists(Offsprings.name, envir=ppiPreEnv)) {
   468          TCSSGetOffsprings(wh_ont)
   469      }
   470      Offsprings &amp;lt;- get(Offsprings.name, envir=ppiPreEnv)
   471      cnt &amp;lt;- sapply(goids,function(x){ c=gocount[unlist(Offsprings[x])]; gocount[x]+sum(c[!is.na(c)])})
   472      names(cnt) &amp;lt;- goids
   473      IC&amp;lt;- -log(cnt/sum(gocount))
   474  message(&amp;quot;done...&amp;quot;)
   475      return (IC)
   476  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and ygcCompute_Information_Content in GOSemSim 1.6.8:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   326  ygcCompute_Information_Content &amp;lt;- function(dropCodes=&amp;quot;NULL&amp;quot;, ont, organism) {
   327      wh_ont &amp;lt;- match.arg(ont, c(&amp;quot;MF&amp;quot;, &amp;quot;BP&amp;quot;, &amp;quot;CC&amp;quot;))
   328      wh_organism &amp;lt;- match.arg(organism, c(&amp;quot;human&amp;quot;, &amp;quot;fly&amp;quot;, &amp;quot;mouse&amp;quot;, &amp;quot;rat&amp;quot;, &amp;quot;yeast&amp;quot;, &amp;quot;zebrafish&amp;quot;, &amp;quot;worm&amp;quot;, &amp;quot;arabidopsis&amp;quot;, &amp;quot;ecolik12&amp;quot;, &amp;quot;bovine&amp;quot;,&amp;quot;canine&amp;quot;,&amp;quot;anopheles&amp;quot;,&amp;quot;ecsakai&amp;quot;,&amp;quot;chicken&amp;quot;,&amp;quot;chimp&amp;quot;,&amp;quot;malaria&amp;quot;,&amp;quot;rhesus&amp;quot;,&amp;quot;pig&amp;quot;,&amp;quot;xenopus&amp;quot;))
   329      ygcCheckAnnotationPackage(wh_organism)
   330      gomap &amp;lt;- switch(wh_organism,
   331          human = org.Hs.egGO,
   332          fly = org.Dm.egGO,
   333          mouse = org.Mm.egGO,
   334          rat = org.Rn.egGO,
   335          yeast = org.Sc.sgdGO,
   336          zebrafish = org.Dr.egGO,
   337          worm = org.Ce.egGO,
   338          arabidopsis = org.At.tairGO,
   339          ecolik12 = org.EcK12.egGO,
   340          bovine  = org.Bt.egGO,
   341          canine  = org.Cf.egGO,
   342          anopheles   =   org.Ag.egGO,
   343          ecsakai =   org.EcSakai.egGO,
   344          chicken =   org.Gg.egGO,
   345          chimp   =   org.Pt.egGO,
   346          malaria =   org.Pf.plasmoGO,
   347          rhesus  =   org.Mmu.egGO,
   348          pig = org.Ss.egGO,
   349          xenopus =   org.Xl.egGO
   350      )
   351      mapped_genes &amp;lt;- mappedkeys(gomap)
   352      gomap = AnnotationDbi::as.list(gomap[mapped_genes])
   353      if (!is.null(dropCodes)){
   354          gomap&amp;lt;-sapply(gomap,function(x) sapply(x,function(y) c(y$Evidence %in% dropCodes, y$Ontology %in% wh_ont)))
   355          gomap&amp;lt;-sapply(gomap, function(x) x[2,x[1,]==&amp;quot;FALSE&amp;quot;])
   356          gomap&amp;lt;-gomap[sapply(gomap,length) &amp;gt;0]
   357      }else {
   358          gomap &amp;lt;- sapply(gomap,function(x) sapply(x,function(y) y$Ontology %in% wh_ont))
   359      }
   360
   361      goterms&amp;lt;-unlist(sapply(gomap, function(x) names(x)), use.names=FALSE) # all GO terms appearing in an annotation
   362      goids &amp;lt;- toTable(GOTERM)
   363      # all go terms which belong to the corresponding category..
   364      goids &amp;lt;- unique(goids[goids[,&amp;quot;Ontology&amp;quot;] == wh_ont, &amp;quot;go_id&amp;quot;])
   365      gocount &amp;lt;- table(goterms)
   366      goname &amp;lt;- names(gocount) #goid of specific organism and selected category.
   367      ## ensure goterms not appearing in the specific annotation have 0 frequency..
   368      go.diff &amp;lt;- setdiff(goids, goname)
   369      m &amp;lt;- double(length(go.diff))
   370      names(m) &amp;lt;- go.diff
   371      gocount &amp;lt;- as.vector(gocount)
   372      names(gocount) &amp;lt;- goname
   373      gocount &amp;lt;- c(gocount, m)
   374
   375      Offsprings.name &amp;lt;- switch(wh_ont,
   376          MF = &amp;quot;MFOffsprings&amp;quot;,
   377          BP = &amp;quot;BPOffsprings&amp;quot;,
   378          CC = &amp;quot;CCOffsprings&amp;quot;
   379      )
   380      if (!exists(Offsprings.name, envir=GOSemSimEnv)) {
   381          ygcGetOffsprings(wh_ont)
   382      }
   383      Offsprings &amp;lt;- get(Offsprings.name, envir=GOSemSimEnv)
   384      cnt &amp;lt;- sapply(goids,function(x){ c=gocount[unlist(Offsprings[x])]; gocount[x]+sum(c[!is.na(c)])})
   385      names(cnt) &amp;lt;- goids
   386      IC&amp;lt;- -log(cnt/sum(gocount))
   387      save(IC, file=paste(paste(&amp;quot;Info_Contents&amp;quot;, wh_ont, organism, sep=&amp;quot;_&amp;quot;), &amp;quot;.rda&amp;quot;, sep=&amp;quot;&amp;quot;))
   388  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another helper function GetGOMap in ppiPre:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   308  GetGOMap &amp;lt;- function(organism=&amp;quot;yeast&amp;quot;) {
   309      if(!exists(&amp;quot;ppiPreEnv&amp;quot;)) .initial()
   310      CheckAnnotationPackage(organism) #download and install the packages
   311      species &amp;lt;- switch(organism,
   312          human = &amp;quot;Hs&amp;quot;,
   313          fly = &amp;quot;Dm&amp;quot;,
   314          mouse = &amp;quot;Mm&amp;quot;,
   315          rat = &amp;quot;Rn&amp;quot;,
   316          yeast = &amp;quot;Sc&amp;quot;,
   317          zebrafish = &amp;quot;Dr&amp;quot;,
   318          worm = &amp;quot;Ce&amp;quot;,
   319          arabidopsis = &amp;quot;At&amp;quot;,
   320          ecolik12 = &amp;quot;EcK12&amp;quot;,
   321          bovine  = &amp;quot;Bt&amp;quot;,
   322          canine  = &amp;quot;Cf&amp;quot;,
   323          anopheles   =   &amp;quot;Ag&amp;quot;,
   324          ecsakai =   &amp;quot;EcSakai&amp;quot;,
   325          chicken =   &amp;quot;Gg&amp;quot;,
   326          chimp   =   &amp;quot;Pt&amp;quot;,
   327          malaria =   &amp;quot;Pf&amp;quot;,
   328          rhesus  =   &amp;quot;Mmu&amp;quot;,
   329          pig = &amp;quot;Ss&amp;quot;,
   330          xenopus =   &amp;quot;Xl&amp;quot;,
   331          coelicolor  =   &amp;quot;Sco&amp;quot;
   332      )
   333
   334      gomap &amp;lt;- switch(organism,
   335          human = org.Hs.egGO,
   336          fly = org.Dm.egGO,
   337          mouse = org.Mm.egGO,
   338          rat = org.Rn.egGO,
   339          yeast = org.Sc.sgdGO,
   340          zebrafish = org.Dr.egGO,
   341          worm = org.Ce.egGO,
   342          arabidopsis = org.At.tairGO,
   343          ecoli = org.EcK12.egGO,
   344          bovine  = org.Bt.egGO,
   345          canine  = org.Cf.egGO,
   346          anopheles   =   org.Ag.egGO,
   347          ecsakai =   org.EcSakai.egGO,
   348          chicken =   org.Gg.egGO,
   349          chimp   =   org.Pt.egGO,
   350          malaria =   org.Pf.plasmoGO,
   351          rhesus  =   org.Mmu.egGO,
   352          pig = org.Ss.egGO,
   353          xenopus =   org.Xl.egGO,
   354          coelicolor  =   org.Sco.egGO
   355      )
   356
   357      assign(eval(species), gomap, envir=ppiPreEnv)
   358  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My ygcGetGOMap in GOSemSim 1.6.8:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   100  ygcGetGOMap &amp;lt;- function(organism=&amp;quot;human&amp;quot;) {
   101      if(!exists(&amp;quot;GOSemSimEnv&amp;quot;)) .initial()
   102      ygcCheckAnnotationPackage(organism)
   103      species &amp;lt;- switch(organism,
   104          human = &amp;quot;Hs&amp;quot;,
   105          fly = &amp;quot;Dm&amp;quot;,
   106          mouse = &amp;quot;Mm&amp;quot;,
   107          rat = &amp;quot;Rn&amp;quot;,
   108          yeast = &amp;quot;Sc&amp;quot;,
   109          zebrafish = &amp;quot;Dr&amp;quot;,
   110          worm = &amp;quot;Ce&amp;quot;,
   111          arabidopsis = &amp;quot;At&amp;quot;,
   112          ecolik12 = &amp;quot;EcK12&amp;quot;,
   113          bovine  = &amp;quot;Bt&amp;quot;,
   114          canine  = &amp;quot;Cf&amp;quot;,
   115          anopheles   =   &amp;quot;Ag&amp;quot;,
   116          ecsakai =   &amp;quot;EcSakai&amp;quot;,
   117          chicken =   &amp;quot;Gg&amp;quot;,
   118          chimp   =   &amp;quot;Pt&amp;quot;,
   119          malaria =   &amp;quot;Pf&amp;quot;,
   120          rhesus  =   &amp;quot;Mmu&amp;quot;,
   121          pig = &amp;quot;Ss&amp;quot;,
   122          xenopus =   &amp;quot;Xl&amp;quot;
   123      )
   124      gomap &amp;lt;- switch(organism,
   125          human = org.Hs.egGO,
   126          fly = org.Dm.egGO,
   127          mouse = org.Mm.egGO,
   128          rat = org.Rn.egGO,
   129          yeast = org.Sc.sgdGO,
   130          zebrafish = org.Dr.egGO,
   131          worm = org.Ce.egGO,
   132          arabidopsis = org.At.tairGO,
   133          ecolik12 = org.EcK12.egGO,
   134          bovine  = org.Bt.egGO,
   135          canine  = org.Cf.egGO,
   136          anopheles   =   org.Ag.egGO,
   137          ecsakai =   org.EcSakai.egGO,
   138          chicken =   org.Gg.egGO,
   139          chimp   =   org.Pt.egGO,
   140          malaria =   org.Pf.plasmoGO,
   141          rhesus  =   org.Mmu.egGO,
   142          pig = org.Ss.egGO,
   143          xenopus =   org.Xl.egGO
   144      )
   145      assign(eval(species), gomap, envir=GOSemSimEnv)
   146  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are many other small helper functions that are identical. ppiPre
copy most of the source code of GOSemSim. There is 862 lines in
GOKEGGSims.r, in which only the following function is about KEGG that is
not related to GOSemSim.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    10  KEGGSim &amp;lt;- function(protein1, protein2)    # KEGG-based similarity of two proteins
    11  {
    12
    13    if(!require(&amp;quot;KEGG.db&amp;quot;)){ stop(&amp;quot;package KEGG.db is needed.&amp;quot;)}
    14    Pathway1 &amp;lt;- KEGG.db::KEGGEXTID2PATHID[[protein1]]
    15      Pathway2 &amp;lt;- KEGG.db::KEGGEXTID2PATHID[[protein2]]
    16      intersec &amp;lt;- length(na.omit(match(Pathway1, Pathway2)))
    17      if(intersec==0)
    18          sim&amp;lt;-0
    19      else
    20          sim&amp;lt;-intersec/(length(Pathway1)+length(Pathway2)-intersec)
    21      return(sim)
    22  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function is only 12 lines, and it calculates the similarity by
divide the intersect to the total sum. The other lines in GOKEGGSims.r,
more than 800 lines, were totally copied from GOSemSim. Other source
files in the ppiPre only has less than 450 lines in sum. &lt;strong&gt;About &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; of
ppiPre were copied from GOSemSim&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The author of ppiPre changed the function names and pretend it is their
original works. They just copy and paste and take the credit of months
of development of GOSemSim. This is really sucks.&lt;/p&gt;

&lt;p&gt;After I found this issue, I add a proper use of GOSemSim statement in
its &lt;a href=&#34;https://github.com/GuangchuangYu/GOSemSim&#34;&gt;github page&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-style=&amp;quot;word-wrap: break-word; white-space: pre-wrap; white-space: -moz-pre-wrap&amp;quot;&#34;&gt;I am very glad that many people find GOSemSim useful and GOSemSim has been cited by 114 (by google scholar, Aug, 2014).

There are two R packages BiSEp and tRanslatome depend on GOSemSim and three R packages clusterProfiler, DOSE and Rcpi import GOSemSim.

SemDist package copy some of the source code from GOSemSim with acknowledging within source code and document.

ppiPre package copy many source code from GOSemSim without any acknowledgement in souce code or document and did not cited GOSemSim in their publication. This violates the restriction of open source license.

For R developers, if you found functions provided in GOSemSim useful, please depends or imports GOSemSim. If you would like to copy and paste source code, you should acknowledge the source code was copied/derived from GOSemSim authored by Guangchuang Yu guangchuangyu@gmail.com within source code, add GOSemSim in Suggests field and also includes the following reference in the man files for functions that copied/derived from GOSemSim and cited in vignettes.

\references{
  Yu et al. (2010) GOSemSim: an R package for measuring
  semantic similarity among GO terms and gene products
  \emph{Bioinformatics} (Oxford, England), 26:7 976--978,
  April 2010. ISSN 1367-4803
  \url{http://bioinformatics.oxfordjournals.org/cgi/content/abstract/26/7/976}
  PMID: 20179076
}

You are welcome to use GOSemSim in the way you like, but please cite it and give it the proper credit. I hope you can understand.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GOSemSim</title>
      <link>http://guangchuangyu.github.io/2008/08/gosemsim/</link>
      <pubDate>Mon, 11 Aug 2008 14:21:00 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2008/08/gosemsim/</guid>
      <description>&lt;p&gt;第一次写软件包，计算基因和GO的语义相似性。&lt;/p&gt;

&lt;p&gt;实现&lt;a href=&#34;http://bioinformatics.oxfordjournals.org/cgi/content/full/23/10/1274&#34;&gt;Wang&lt;/a&gt;的方法，基于GO的图结构。
以及四种基于信息含量的计算方法（Resnik, Jiang, Lin, Rel）。&lt;/p&gt;

&lt;p&gt;可以从Bioconductor下载到。
&lt;a href=&#34;http://bioconductor.org/packages/release/bioc/html/GOSemSim.html&#34;&gt;http://bioconductor.org/packages/release/bioc/html/GOSemSim.html&lt;/a&gt;
&lt;a href=&#34;http://bioconductor.org/packages/devel/bioc/html/GOSemSim.html&#34;&gt;http://bioconductor.org/packages/devel/bioc/html/GOSemSim.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;支持human, rat, mouse, fly, yeast, zebrafish,worm, E coli,
arabidopsis等物种。&lt;/p&gt;

&lt;p&gt;下载量统计如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://bioconductor.org/packages/stats/bioc/GOSemSim.png&#34; alt=&#34;&#34; title=&#34;GOSemSim_Downloads&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>