<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Math on Guangchuang Yu</title>
    <link>http://guangchuangyu.github.io/categories/math/</link>
    <description>Recent content in Math on Guangchuang Yu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Aug 2011 17:44:42 +0800</lastBuildDate>
    <atom:link href="http://guangchuangyu.github.io/categories/math/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>the batman equation</title>
      <link>http://guangchuangyu.github.io/2011/08/the-batman-equation/</link>
      <pubDate>Sat, 13 Aug 2011 17:44:42 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2011/08/the-batman-equation/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.hardocp.com/news/2011/07/29/batman_equation/&#34;&gt;HardOCP&lt;/a&gt; has
an image with an equation which apparently draws the Batman logo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.hardocp.com/images/news/1311973762NiYVK7SXvm_1_1_l.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;$((\frac{x}{7})^2 \cdot \sqrt{\frac{||x|-3|}{(|x|-3)}}+
(\frac{y}{3})^2 \cdot \sqrt{\frac{|y+3 \cdot
\frac{\sqrt{33}}{7}|}{y+3 \cdot \frac{\sqrt{33}}{7}}}-1) \cdot
(|\frac{x}{2}|-((3 \cdot \frac{\sqrt{33}-7)}{112}) \cdot
x^2-3+\sqrt{1-(||x|-2|-1)^2}-y) \cdot (9 \cdot
\sqrt{\frac{|(|x|-1) \cdot (|x|-0.75)|}{((1-|x|)*(|x|-0.75))}}-8
\cdot |x|-y) \cdot (3 \cdot |x|+0.75 \cdot \sqrt{\frac{|(|x|-0.75)
\cdot (|x|-0.5)|}{((0.75-|x|) \cdot (|x|-0.5))}}-y) \cdot (2.25
\cdot \sqrt{\frac{|(x-0.5) \cdot (x+0.5)|}{((0.5-x) \cdot
(0.5+x))}}-y) \cdot (\frac{6 \cdot \sqrt{10}}{7}+(1.5-0.5 \cdot
|x|) \cdot \sqrt{\frac{||x|-1|}{|x|-1}}-(\frac{6 \cdot
\sqrt{10}}{14}) \cdot \sqrt{4-(|x|-1)^2}-y) =0$&lt;/p&gt;

&lt;p&gt;This function is very delightful for drawing such a graph, but write it
down in latex is very tedious. As a product of factors is 0 if and only
if any one of them is 0, multiplying these six factors puts the curves
together. This graph is no more than the combination of six curves.&lt;/p&gt;

&lt;p&gt;All these six curves are very simple, for instance, the first factor is
the ellipse $(\frac{x}{7})^2 + (\frac{y}{3})^2 = 1 $, in the
region where &lt;code&gt;|x|&amp;gt;3&lt;/code&gt; and &lt;code&gt;y&amp;gt;-3$\sqrt{33}$/7&lt;/code&gt;; the region
were restricted by $\sqrt{\frac{||x|-3|}{(|x|-3)}} $ and
$\sqrt{\frac{|y+3 \cdot \frac{\sqrt{33}}{7}|}{y+3 \cdot \frac{\sqrt{33}}{7}}}$&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what I got from the equation using ggplot2&amp;hellip;
&lt;img src=&#34;http://guangchuangyu.github.io/blog_images/2011/08/X.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
require(ggplot2)

f1 &amp;lt;- function(x) {
    y1 &amp;lt;- 3*sqrt(1-(x/7)^2)
    y2 &amp;lt;- -3*sqrt(1-(x/7)^2)
    y &amp;lt;- c(y1,y2)
    d &amp;lt;- data.frame(x=x,y=y)
    d &amp;lt;- d[d$y &amp;gt; -3*sqrt(33)/7,]
    return(d)
}

x1 &amp;lt;- c(seq(3, 7, 0.001), seq(-7, -3, 0.001))
d1 &amp;lt;- f1(x1)
p1 &amp;lt;- ggplot(d1,aes(x,y)) + geom_point(color=&amp;quot;red&amp;quot;)

x2 &amp;lt;- seq(-4,4, 0.001)
y2 &amp;lt;- abs(x2/2)-(3*sqrt(33)-7)*x2^2/112-3 + sqrt(1-(abs(abs(x2)-2)-1)^2)

#only work with ggplot2 &amp;lt;= 0.8.9
#p2 &amp;lt;- p1 + geom_point(aes(x=x2,y=y2), color=&amp;quot;yellow&amp;quot;) 

# in ggplot2 0.9.0, should be:
d2 &amp;lt;- data.frame(x2=x2, y2=y2)
p2 &amp;lt;- p1 + geom_point(data=d2, aes(x=x2,y=y2), color=&amp;quot;yellow&amp;quot;)



x3 &amp;lt;- c(seq(0.75,1,0.001), seq(-1,-0.75,0.001))
y3 &amp;lt;- 9-8*abs(x3)
#p3 &amp;lt;- p2+geom_point(aes(x=x3,y=y3), color=&amp;quot;green&amp;quot;)
d3 &amp;lt;- data.frame(x3=x3, y3=y3)
p3 &amp;lt;- p2+geom_point(data=d3, aes(x=x3,y=y3), color=&amp;quot;green&amp;quot;)


x4 &amp;lt;- c(seq(0.5,0.75,0.001), seq(-0.75,-0.5,0.001))
y4 &amp;lt;- 3*abs(x4)+0.75
#p4 &amp;lt;- p3+geom_point(aes(x=x4,y=y4), color=&amp;quot;steelblue&amp;quot;)
d4 &amp;lt;- data.frame(x4=x4,y4=y4)
p4 &amp;lt;- p3+geom_point(data=d4, aes(x=x4,y=y4), color=&amp;quot;steelblue&amp;quot;)


x5 &amp;lt;- seq(-0.5,0.5,0.001)
y5 &amp;lt;- rep(2.25,length(x5))
#p5 &amp;lt;- p4+geom_point(aes(x=x5,y=y5))
d5 &amp;lt;- data.frame(x5=x5,y5=y5)
p5 &amp;lt;- p4+geom_point(data=d5, aes(x=x5,y=y5))

x6 &amp;lt;- c(seq(-3,-1,0.001), seq(1,3,0.001))
y6 &amp;lt;- 6 * sqrt(10)/7 +
    (1.5 - 0.5 * abs(x6)) * sqrt(abs(abs(x6)-1)/(abs(x6)-1)) -
    6 * sqrt(10) * sqrt(4-(abs(x6)-1)^2)/14
#p6 &amp;lt;- p5+geom_point(aes(x=x6,y=y6), colour=&amp;quot;blue&amp;quot;)
d6 &amp;lt;- data.frame(x6=x6,y6=y6)
p6 &amp;lt;- p5+geom_point(data=d6,aes(x=x6,y=y6), colour=&amp;quot;blue&amp;quot;)

p &amp;lt;- p6+theme_bw()
print(p)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Newton-Raphson Method估算函数的根</title>
      <link>http://guangchuangyu.github.io/2007/06/newton-raphson-method%E4%BC%B0%E7%AE%97%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%B9/</link>
      <pubDate>Sat, 02 Jun 2007 13:53:00 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2007/06/newton-raphson-method%E4%BC%B0%E7%AE%97%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%B9/</guid>
      <description>

&lt;h2 id=&#34;newton-raphson-method:8c998fd44af3436f18eebfbca2f9fb1d&#34;&gt;Newton-Raphson Method&lt;/h2&gt;

&lt;p&gt;曲线&lt;code&gt;f(x)&lt;/code&gt;有根c,取曲线上一点$(x_1,f(x_1))$, 过此点的切线交x轴$x_2$,过曲线上$(x_2,f(x_2))$的切线交x轴$x_3$，如此反复得到一个序列 $x_1,x_2,\cdot \cdot \cdot,x_n$ 逼近c值.&lt;/p&gt;

&lt;p&gt;过&lt;code&gt;$(x_n,f(x_n))$&lt;/code&gt;的切线方程为 &lt;code&gt;$y-f(x_n) = f&#39;(x_n)\,(x-x_n)$&lt;/code&gt;,假设此方程与x轴的交点为&lt;code&gt;$x_{n+1}$&lt;/code&gt;, 即有: &lt;code&gt;$0 - f(x_n) = f&#39;(x_n)(x_n+1 - x_n)$&lt;/code&gt;， 即&lt;code&gt;$x_{n+1} = x_n - \frac{f(x_n)}{f&#39;(x_n)}$&lt;/code&gt; &lt;code&gt;&amp;lt;Eq. 1&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;下面利用此法来求一个数的开方。 $f(x) = x^2 - a$ 有根$\sqrt{a}$,
由&lt;code&gt;$f&#39;(x_n) = 2x_n$&lt;/code&gt;, 代入式&lt;code&gt;&amp;lt;Eq. 1&amp;gt;&lt;/code&gt;可得$x_{n+1} = (x_n + a/x_n)/2$; 当i -&amp;gt; INF 时, $x_i$ -&amp;gt; $\sqrt{a}$;&lt;/p&gt;

&lt;h2 id=&#34;c-implementation:8c998fd44af3436f18eebfbca2f9fb1d&#34;&gt;C implementation&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#include

int main(void){
    int a,error;
    double x0,x1 = 1;
    do {
        printf(&amp;quot;Input a positive integer: &amp;quot;);
        scanf(&amp;quot;%d&amp;quot;,&amp;amp;a);
        if (error = (a &amp;lt;=0))
            printf(&amp;quot;\nERROR: Do it again!\n\n&amp;quot;);
        }
    while (error);

 while (x0 != x1) {
        x0 = x1; /* save the current value of x1 */
        x1 = 0.5 * (x1 + a / x1); /* compute a new value of x1 */
    }
    printf(&amp;quot;%lf\n&amp;quot;,x1);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;r-implemantation:8c998fd44af3436f18eebfbca2f9fb1d&#34;&gt;R implemantation&lt;/h2&gt;

&lt;p&gt;2010-01-11 用R来实现一下，不单是求开方，估算函数的根。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;newton &amp;lt;- function(fun, x0, tol=1e-7, niter=100) { 
    fun.list = as.list(fun)
    var &amp;lt;- names(fun.list[1])
    fun.exp = fun.list[[2]] 
    diff.fun = D(fun.exp, var) 
    df = list(x=0, diff.fun) 
    df = as.function(df) 
    for (i in 1:niter) { 
        x = x0 - fun(x0)/df(x0) 
        if (abs(fun(x)) &amp;lt; tol) 
            return(x) 
        x0 = x      
    } 
    stop(&amp;quot;exceeded allowed number of iterations&amp;quot;) 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; f = function(x) x^2 – 5
&amp;gt; newton(f, 4)
[1] 2.236068
&amp;gt; g = function(x) x^3 – 5
&amp;gt; newton(g, 4)
[1] 1.709976
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>