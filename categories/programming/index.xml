<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Guangchuang Yu</title>
    <link>https://guangchuangyu.github.io/categories/programming/</link>
    <description>Recent content in Programming on Guangchuang Yu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Sep 2011 06:40:22 +0800</lastBuildDate>
    
	<atom:link href="https://guangchuangyu.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MC积分</title>
      <link>https://guangchuangyu.github.io/2011/09/mc-integration/</link>
      <pubDate>Thu, 22 Sep 2011 06:40:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/2011/09/mc-integration/</guid>
      <description>&lt;p&gt;Monte Carlo方法由冯·诺伊曼于二战时提出，1777年法国人布丰用此思路&lt;a href=&#34;http://guangchuangyu.github.io/cn/2011/09/monte-carlo-estimate-pi/&#34;&gt;估计pi值&lt;/a&gt;被认为是Monte
Carlo的起源，这个方法简单又快速，通过产生随机数，将数值计算问题变成随机变量的某些特征值（比如期望值）。&lt;/p&gt;
&lt;p&gt;积分运算，和&lt;a href=&#34;http://guangchuangyu.github.io/cn/2011/09/monte-carlo-estimate-pi/&#34;&gt;估计pi值&lt;/a&gt;一样，用hit
and miss法估计。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hit_miss &amp;lt;- function(fun, lower, upper, n=500) {
    # Monte Carlo integration using the hit and miss method
    x &amp;lt;- runif(n, lower, upper)
    f.value &amp;lt;- sapply(seq(lower, upper, 0.001), fun)
    f.min &amp;lt;- min(f.value)
    f.max &amp;lt;- max(f.value)
    y &amp;lt;- runif(n, f.min, f.max)
    hits &amp;lt;- sum(y &amp;lt;= fun(x))
    area &amp;lt;- (upper-lower) * f.min + hits/n * (upper-lower) * (f.max-f.min)
    return(area)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;hit and miss方法收敛太慢，效率并不高，通常所说的MC积分是指下面这个方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Monte Carlo估计pi值</title>
      <link>https://guangchuangyu.github.io/2011/09/monte-carlo-estimate-pi/</link>
      <pubDate>Wed, 21 Sep 2011 10:40:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/2011/09/monte-carlo-estimate-pi/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://mathfaculty.fullerton.edu/mathews/n2003/montecarlopi/MonteCarloPiMod/Images/MonteCarloPiMod_gr_11.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;圆和外接正方形的面积比，是$ \frac{\pi r^2}{(2r)^2} = \frac{\pi}{4}$.&lt;/p&gt;
&lt;p&gt;通过这一比值，可以使用&lt;!-- raw HTML omitted --&gt;蒙特-卡罗方法&lt;!-- raw HTML omitted --&gt;来估计Pi，这是Monte Carlo方法的最经典的一个例子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getPI &amp;lt;- function(N) {
    x &amp;lt;- runif(N)
    y &amp;lt;- runif(N)
    hits &amp;lt;- sum(sqrt(x^2+y^2) &amp;lt; 1)
    pi &amp;lt;- 4*hits/N
    return(pi)
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>one-dimensional integrals</title>
      <link>https://guangchuangyu.github.io/2010/12/one-dimensional-integrals/</link>
      <pubDate>Sat, 25 Dec 2010 10:40:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/2010/12/one-dimensional-integrals/</guid>
      <description>The foundamental idea of numerical integration is to estimate the area of the region in the xy-plane bounded by the graph of function f(x). The integral was esimated by dividing x into small intervals, then adds all the small approximations to give a total approximation.
Trapezoidal rule Numerical integration can be done by trapezoidal rule, simpson&amp;rsquo;s rule and quadrature rules. R has a built-in function, integrate, which performs adaptive quadrature.</description>
    </item>
    
    <item>
      <title>Root finding</title>
      <link>https://guangchuangyu.github.io/2010/12/root-finding/</link>
      <pubDate>Sat, 04 Dec 2010 10:40:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/2010/12/root-finding/</guid>
      <description>&lt;p&gt;Numerical root finding methods use iteration, producing a sequence of numbers that hopefully converge towards a limits which is a root. This post only focuses four basic algorithms on root finding, and covers bisection method, fixed point method, Newton-Raphson method, and secant method.&lt;/p&gt;
&lt;p&gt;The simplest root finding algorithms is the &lt;a href=&#34;https://guangchuangyu.github.io/cn/2008/11/bisect-to-solve-equation/&#34;&gt;bisection method&lt;/a&gt;. It works when &lt;code&gt;f&lt;/code&gt; is a continuous function and it requires previous knowledge of two initial gueeses, &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt;, such that &lt;code&gt;f(u)&lt;/code&gt; and &lt;code&gt;f(v)&lt;/code&gt; have opposite signs. This method is reliable, but converges slowly. For detail, see &lt;a href=&#34;https://guangchuangyu.github.io/cn/2008/11/bisect-to-solve-equation/&#34;&gt;https://guangchuangyu.github.io/cn/2008/11/bisect-to-solve-equation/&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Root finding can be reduced to the problem of finding fixed points of the function &lt;code&gt;g(x) = c*f(x) +x&lt;/code&gt;, where &lt;code&gt;c&lt;/code&gt; is a non-zero constant. It is clearly that &lt;code&gt;f(a) = 0&lt;/code&gt; if and only if &lt;code&gt;g(a) = a&lt;/code&gt;. This is the so called fixed point algorithm.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The S3 OOP system</title>
      <link>https://guangchuangyu.github.io/2010/10/the-s3-oop-system/</link>
      <pubDate>Fri, 15 Oct 2010 07:24:30 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/2010/10/the-s3-oop-system/</guid>
      <description>&lt;p&gt;R currently supports two internal OOP systems (S3 and S4), and several
others as add-on packages, such as
&lt;a href=&#34;http://cran.r-project.org/web/packages/R.oo/index.html&#34;&gt;R.oo&lt;/a&gt;, and
&lt;a href=&#34;http://www.omegahat.org/OOP/&#34;&gt;OOP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;S3 is easy to use but not reliable enough for large software projects. The S3 system emphasize on generic functions and polymorphism. It&amp;rsquo;s a function centric system which is different from class centric system like JAVA.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于编程，我的理解</title>
      <link>https://guangchuangyu.github.io/2008/12/opinion-in-programming/</link>
      <pubDate>Sun, 14 Dec 2008 09:18:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/2008/12/opinion-in-programming/</guid>
      <description>&lt;p&gt;写给某个小朋友看，希望我的一点看法，能有用。欢迎讨论。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么会有编程语言？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;计算机史前有过不同的理论，但最后活下来的，只有图灵机一个模型。现在的计算机，都是基于此发展的，跟二战前那个三层楼高的计算机，没啥区别，那个机器一堆开关，人工操作。CPU做的计算也是开关的逻辑计算。所以计算机的语言是01二进制，一开一关，告诉计算机要不要发出电子脉冲。写一个程序全是01数字组成的，对于人来说是mission impossible！所以必须要有编程语言。编程语言就是为了&lt;strong&gt;抽象&lt;/strong&gt;计算机机械原理的一面。&lt;/p&gt;
&lt;p&gt;LOAD A ADD B STORE C&lt;/p&gt;
&lt;p&gt;实现两个数的加和，这是人类可读的语言，而不是一串01所组成的不可读的机器语言。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;抽象&lt;/strong&gt;是最关键的。所有的编程语言都是为了实现抽象。越是高级的语言，抽象度越高，抽象度越高越好！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用中值定理求根</title>
      <link>https://guangchuangyu.github.io/2008/11/bisect-to-solve-equation/</link>
      <pubDate>Tue, 25 Nov 2008 10:40:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/2008/11/bisect-to-solve-equation/</guid>
      <description>&lt;p&gt;翻看了以前写的&lt;a href=&#34;https://guangchuangyu.github.io/cn/2007/06/newton-raphson-method/&#34;&gt;使用Newton-Raphson Method求一个数的开方&lt;/a&gt;，想到其实也可以用中值定理来实现。
中值定理：f(x)是一个连续性的函数，在[u,v]区间内，当c的值位于f(u)和f(v)之间时，至少存在一个点，满足f(x) = c 当f(u)和f(v)一正一负时，那么在[u,v]之间至少有一个根的存在，这个定理本来就是拿来证明根的存在的，但是其实也可以用来求解根。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Newton-Raphson Method估算函数的根</title>
      <link>https://guangchuangyu.github.io/2007/06/newton-raphson-method/</link>
      <pubDate>Sat, 02 Jun 2007 13:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/2007/06/newton-raphson-method/</guid>
      <description>&lt;h2 id=&#34;newton-raphson-method&#34;&gt;Newton-Raphson Method&lt;/h2&gt;
&lt;p&gt;曲线&lt;code&gt;f(x)&lt;/code&gt;有根c,取曲线上一点$(x_1,f(x_1))$, 过此点的切线交x轴$x_2$,过曲线上$(x_2,f(x_2))$的切线交x轴$x_3$，如此反复得到一个序列 $x_1,x_2,\cdot \cdot \cdot,x_n$ 逼近c值.&lt;/p&gt;
&lt;p&gt;过$(x_n,f(x_n))$的切线方程为 $y-f(x_n) = f&amp;rsquo;(x_n),(x-x_n)$,假设此方程与x轴的交点为$x_{n+1}$, 即有: $0 - f(x_n) = f&amp;rsquo;(x_n)(x_n+1 - x_n)$， 即$x_{n+1} = x_n - \frac{f(x_n)}{f&amp;rsquo;(x_n)}$ &lt;code&gt;&amp;lt;Eq. 1&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;下面利用此法来求一个数的开方。 $f(x) = x^2 - a$ 有根$\sqrt{a}$, 
由$f&amp;rsquo;(x_n) = 2x_n$, 代入式&lt;code&gt;&amp;lt;Eq. 1&amp;gt;&lt;/code&gt;可得$x_{n+1} = (x_n + a/x_n)/2$; 当i -&amp;gt; INF 时, $x_i$ -&amp;gt; $\sqrt{a}$;&lt;/p&gt;
&lt;h2 id=&#34;c-implementation&#34;&gt;C implementation&lt;/h2&gt;</description>
    </item>
    
  </channel>
</rss>