<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visualization on G. Yu</title>
    <link>http://guangchuangyu.github.io/categories/visualization/</link>
    <description>Recent content in Visualization on G. Yu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Apr 2015 01:50:04 +0800</lastBuildDate>
    <atom:link href="http://guangchuangyu.github.io/categories/visualization/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>an example of drawing beast tree using ggtree</title>
      <link>http://guangchuangyu.github.io/2015/04/an-example-of-drawing-beast-tree-using-ggtree/</link>
      <pubDate>Wed, 01 Apr 2015 01:50:04 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/04/an-example-of-drawing-beast-tree-using-ggtree/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://beast.bio.ed.ac.uk/figtree&#34;&gt;FigTree&lt;/a&gt; is designed for viewing
beast output as demonstrated by their example data:
&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot%202015-03-10%2018.15.57.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;BEAST output is well supported by
&lt;a href=&#34;https://github.com/GuangchuangYu/ggtree&#34;&gt;ggtree&lt;/a&gt; and it&amp;rsquo;s easy to
reproduce such a tree view.
&lt;a href=&#34;https://github.com/GuangchuangYu/ggtree&#34;&gt;ggtree&lt;/a&gt; supports parsing beast
output by read.beast function. We can visualize the tree directly by
using ggtree function. Since this is a time scale tree, we can set the
parameter &lt;strong&gt;&lt;em&gt;mrsd&lt;/em&gt;&lt;/strong&gt; to most recent sampling date.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;require(ggplot2)
require(ggtree)
x &amp;lt;- read.beast(&amp;quot;/Applications/FigTree/influenza.tree&amp;quot;)
cols &amp;lt;- scale_color(x, by=&amp;quot;height&amp;quot;)
ggtree(x, right=TRUE, mrsd=&amp;quot;2005-04-02&amp;quot;, color=cols) + theme_tree2() +
    geom_text(aes(x=max(x), label=label), size=1, color=cols, hjust=-.3) +
        scale_x_continuous(breaks=c(1992, 1995, 1997, 2000, 2002, 2005), minor_breaks=seq(1992, 2005, 1)) +
            geom_segment(aes(xend=max(x)+.20, yend=y), linetype=&amp;quot;dotted&amp;quot;, size=.1, color=cols) +
                theme(panel.grid.major   = element_line(color=&amp;quot;black&amp;quot;, size=.2),
                      panel.grid.minor   = element_line(color=&amp;quot;grey&amp;quot;, size=.2),
                      panel.grid.major.y = element_blank(),
                      panel.grid.minor.y = element_blank()) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot%202015-03-10%2018.16.14.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>scilab三维平面绘图</title>
      <link>http://guangchuangyu.github.io/2007/05/scilab%E4%B8%89%E7%BB%B4%E5%B9%B3%E9%9D%A2%E7%BB%98%E5%9B%BE/</link>
      <pubDate>Thu, 03 May 2007 10:27:00 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2007/05/scilab%E4%B8%89%E7%BB%B4%E5%B9%B3%E9%9D%A2%E7%BB%98%E5%9B%BE/</guid>
      <description>

&lt;p&gt;三维绘图可以分为两大类型：矩阵型和曲面型。&lt;/p&gt;

&lt;h2 id=&#34;矩阵型:8b9e6891715644f541f979f699d9fdf4&#34;&gt;矩阵型&lt;/h2&gt;

&lt;p&gt;通常是声明一个矩阵，以矩阵的长宽为x,y范围，以矩阵里面的数值为高z，
使用&lt;code&gt;plot3d(t1,t2,Z,alpha=a,theta=b)&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;t1:y轴方向的范围&lt;/li&gt;
&lt;li&gt;t2:x轴方向的范围&lt;/li&gt;
&lt;li&gt;Z:矩阵&lt;/li&gt;
&lt;li&gt;alpha&lt;/li&gt;
&lt;li&gt;theta参数用于指定角度，让图绘出来以某个特定的角度呈现出来。(optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-scilab&#34;&gt;-&amp;gt;clear -&amp;gt;A=[1 2 5 4 3;0 3 2 8 6;2 4 6 7 5;2 3 4 3 1];
-&amp;gt;t1=1:4; -&amp;gt;t2=1:5;
//plot3d1与plot3d语法类似，能够嵌入多种颜色
-&amp;gt;plot3d(t1,t2,A,alpha=45,theta=45);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mesh不需要边界声明， &lt;code&gt;-&amp;gt;mesh(A);&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;曲面型:8b9e6891715644f541f979f699d9fdf4&#34;&gt;曲面型&lt;/h2&gt;

&lt;p&gt;则是先声明一个连续函数，再选取x,y范围来绘图。
&lt;code&gt;fplot3d()&lt;/code&gt;指令用来绘制连续函数。
用&lt;code&gt;fplot3d&lt;/code&gt;之前，用&lt;code&gt;deff&lt;/code&gt;或&lt;code&gt;function&lt;/code&gt;声明函数z,然后再声明函数范围x,y.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scilab&#34;&gt;-&amp;gt;deff(&#39;z=f(x,y)&#39;,&#39;z=x\*y&#39;); 
-&amp;gt;x=-10:8; -&amp;gt;y=-6:12;
-&amp;gt;fplot3d(x,y,f);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;柱状图:8b9e6891715644f541f979f699d9fdf4&#34;&gt;柱状图&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-scilab&#34;&gt;-&amp;gt;A=[1 3 5 7;2 6 10 14]; //声明一个矩阵 
-&amp;gt;hist3d(A);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;空间立体曲线图:8b9e6891715644f541f979f699d9fdf4&#34;&gt;空间立体曲线图&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;param3d&lt;/code&gt;绘制的是线，而非面。 &lt;code&gt;param3d(xf,yf,zf);&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;xf:x方向的函数&lt;/li&gt;
&lt;li&gt;yf:y方向的函数&lt;/li&gt;
&lt;li&gt;zf:z方向的函数&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-scilab&#34;&gt;-&amp;gt;t=linspace(-%pi,%pi);
-&amp;gt;param3d(sin(t),cos(t),t);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>