<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visualization on G. Yu</title>
    <link>http://guangchuangyu.github.io/categories/visualization/</link>
    <description>Recent content in Visualization on G. Yu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Dec 2015 11:11:11 +0800</lastBuildDate>
    <atom:link href="http://guangchuangyu.github.io/categories/visualization/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>use emoji font in R</title>
      <link>http://guangchuangyu.github.io/2015/12/use-emoji-font-in-r/</link>
      <pubDate>Wed, 16 Dec 2015 11:11:11 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/12/use-emoji-font-in-r/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot 2015-12-16 10.55.49.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I have played with emoji in &lt;code&gt;R&lt;/code&gt; for a while. My solution of using it is different from what implemented in &lt;a href=&#34;https://github.com/dill/emoGG/&#34;&gt;emoGG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;emoGG&lt;/code&gt; is a good attemp to add &lt;code&gt;emoji&lt;/code&gt; in &lt;code&gt;ggplot2&lt;/code&gt;. It render &lt;code&gt;emoji&lt;/code&gt; picture (png) and creat a layer, &lt;code&gt;geom_emoji&lt;/code&gt;, to add emoji.&lt;/p&gt;

&lt;p&gt;In my opinion, &lt;code&gt;emoji&lt;/code&gt; should be treated as ordinary font in user interface, albeit it maynot be true internally.&lt;/p&gt;

&lt;p&gt;It would be more flexible if we can use emoji as ordinary font and in this way user don&amp;rsquo;t need to learn extra stuff.&lt;/p&gt;

&lt;p&gt;I implemented my solution of using &lt;code&gt;emoji&lt;/code&gt; in the R package &lt;a href=&#34;https://github.com/GuangchuangYu/emojifont&#34;&gt;emojifont&lt;/a&gt;. The package is very simple, pack some emoji fonts (currently only &lt;a href=&#34;https://github.com/MorbZ/OpenSansEmoji&#34;&gt;OpenSansEmoji.ttf&lt;/a&gt;) and use &lt;a href=&#34;https://github.com/yixuan/showtext&#34;&gt;showtext&lt;/a&gt; to render the fonts, then we can use the font in either base plot or ggplot2.&lt;/p&gt;

&lt;h1 id=&#34;emojifont:eff1c6109e2664cf9357286de69e0f0b&#34;&gt;emojifont&lt;/h1&gt;

&lt;h2 id=&#34;installation:eff1c6109e2664cf9357286de69e0f0b&#34;&gt;Installation&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&amp;quot;GuangchuangYu/emojifont&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;load-emoji-font:eff1c6109e2664cf9357286de69e0f0b&#34;&gt;load Emoji font&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(emojifont)
## list available emoji fonts
list.emojifonts()

## [1] &amp;quot;OpenSansEmoji.ttf&amp;quot;

## load selected emoji font
load.emojifont(&#39;OpenSansEmoji.ttf&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;emoji-characters:eff1c6109e2664cf9357286de69e0f0b&#34;&gt;Emoji characters&lt;/h1&gt;

&lt;p&gt;To use &lt;code&gt;emoji&lt;/code&gt;, we need to use their corresponding unicode. Emoji unicode can be found in &lt;a href=&#34;http://apps.timwhitlock.info/emoji/tables/unicode&#34;&gt;http://apps.timwhitlock.info/emoji/tables/unicode&lt;/a&gt;, or searched using &lt;a href=&#34;https://github.com/richfitz/remoji&#34;&gt;remoji&lt;/a&gt; package.&lt;/p&gt;

&lt;h1 id=&#34;emoji-in-r-plot:eff1c6109e2664cf9357286de69e0f0b&#34;&gt;Emoji in R plot&lt;/h1&gt;

&lt;h2 id=&#34;base-plot:eff1c6109e2664cf9357286de69e0f0b&#34;&gt;base plot&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;require(remoji)
set.seed(123)
x &amp;lt;- rnorm(10)
set.seed(321)
y &amp;lt;- rnorm(10)
plot(x, y, cex=0)
text(x, y, labels=emoji(&#39;cow&#39;), cex=1.5, col=&#39;steelblue&#39;, family=&#39;OpenSansEmoji&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/emojifont/master/inst/figures/base_emoji-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;ggplot2:eff1c6109e2664cf9357286de69e0f0b&#34;&gt;ggplot2&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d &amp;lt;- data.frame(x=x, y=y,
     label = sample(c(emoji(&#39;cow&#39;), emoji(&#39;camel&#39;)), 10, replace=TRUE),
     type = sample(LETTERS[1:3], 10, replace=TRUE))
require(ggplot2)
ggplot(d, aes(x, y, color=type, label=label)) + 
    geom_text(family=&amp;quot;OpenSansEmoji&amp;quot;, size=5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/emojifont/master/inst/figures/ggplot_emoji-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can also use &lt;code&gt;emoji&lt;/code&gt; in title, legend or axis label.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dd=data.frame(x=emoji(c(&amp;quot;satisfied&amp;quot;, &amp;quot;disapointed&amp;quot;)), y=c(50, 10))
emoji_text=element_text(family=&amp;quot;OpenSansEmoji&amp;quot;, size=20)
ggplot(dd, aes(x, y)) + geom_bar(stat=&#39;identity&#39;, aes(fill=x)) + 
     ggtitle(paste(emoji(c(&amp;quot;+1&amp;quot;, &amp;quot;-1&amp;quot;)), collapse=&amp;quot; &amp;quot;))+ 
        theme(axis.text.x = emoji_text, legend.text=emoji_text, title=emoji_text) + 
            xlab(NULL)+ylab(NULL)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot 2015-12-16 11.10.51.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;ggtree:eff1c6109e2664cf9357286de69e0f0b&#34;&gt;ggtree&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;require(ggtree)
require(colorspace)

tree_text=paste0(
    &amp;quot;(&amp;quot;,&amp;quot;(&amp;quot;,&amp;quot;(&amp;quot;,
       &amp;quot;(&amp;quot;,
            &amp;quot;(&amp;quot;,
               emoji(&amp;quot;cow&amp;quot;), &amp;quot;,&amp;quot;,
               &amp;quot;(&amp;quot;,
                  emoji(&amp;quot;whale&amp;quot;),&amp;quot;,&amp;quot;,
                  emoji(&amp;quot;dolphin&amp;quot;),
               &amp;quot;)&amp;quot;,
            &amp;quot;),&amp;quot;,
            &amp;quot;(&amp;quot;,
               emoji(&#39;pig2&#39;),&amp;quot;,&amp;quot;,
               emoji(&#39;boar&#39;),
            &amp;quot;)&amp;quot;,
       &amp;quot;),&amp;quot;,
       emoji(&amp;quot;camel&amp;quot;),
    &amp;quot;),&amp;quot;, emoji(&amp;quot;fish&amp;quot;), &amp;quot;),&amp;quot;, 
emoji(&amp;quot;seedling&amp;quot;), &amp;quot;);&amp;quot;)

ggtree(read.tree(text=tree_text)) + xlim(NA, 7) +
   geom_tiplab(family=&amp;quot;OpenSansEmoji&amp;quot;, size=10,
               color=rainbow_hcl(8))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/emojifont/master/inst/figures/ggtree_emoji-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;apple-color-emoji:eff1c6109e2664cf9357286de69e0f0b&#34;&gt;Apple Color Emoji&lt;/h1&gt;

&lt;p&gt;Although &lt;code&gt;R&lt;/code&gt;&amp;rsquo;s graphical devices don&amp;rsquo;t support &lt;code&gt;AppleColorEmoji&lt;/code&gt; font, it&amp;rsquo;s still possible to use it. We can export the &lt;code&gt;plot&lt;/code&gt; to &lt;code&gt;svg&lt;/code&gt; file and render it in &lt;code&gt;Safari&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(gridSVG)
p &amp;lt;-  ggtree(read.tree(text=tree_text), size=2) + geom_tiplab(size=20)
p &amp;lt;- p %&amp;gt;% phylopic(&amp;quot;79ad5f09-cf21-4c89-8e7d-0c82a00ce728&amp;quot;, color=&amp;quot;firebrick&amp;quot;, alpha = .3)
p &amp;lt;- p + xlim(NA, 7) + ylim(NA, 8.5)
p
ps = grid.export(&amp;quot;emoji.svg&amp;quot;, addClass=T)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/emojifont/master/inst/figures/apple_emoji.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>subsetting data in ggtree</title>
      <link>http://guangchuangyu.github.io/2015/09/subsetting-data-in-ggtree/</link>
      <pubDate>Thu, 24 Sep 2015 01:20:21 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/09/subsetting-data-in-ggtree/</guid>
      <description>&lt;p&gt;Subsetting is commonly used in ggtree as we would like to for example
separating internal nodes from tips. We may also want to display
annotation to specific node(s)/tip(s).&lt;/p&gt;

&lt;p&gt;Some software may stored clade information (e.g. bootstrap value) as
internal node labels. Indeed we want to manipulate such information and
taxa labels separately.&lt;/p&gt;

&lt;p&gt;In current ggplot2 (version=1.0.1, access date:2015-09-23), it support
&lt;em&gt;subset&lt;/em&gt;. For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;library(ggplot2)
library(ggtree)
tree=read.tree(text=&amp;quot;((A:2,B:2)95:2,(C:2,D:2)100:2);&amp;quot;)
ggtree(tree) + geom_text(aes(label=label), subset=.(!isTip), hjust=-.2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this feature was removed in github version of ggplot2 and will not
be available in next release.&lt;/p&gt;

&lt;p&gt;In github version of ggtree, we implemented geom_text2, geom_point2,
and geom_segment2, that works exactly like geom_text, geom_point and
geom_segment respectively with &lt;em&gt;subset&lt;/em&gt; supported. The syntax is
slightly different.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;ggtree(tree) + geom_text2(aes(label=label, subset=!isTip), hjust=-.2) +
        geom_point2(aes(subset=!isTip), color=&amp;quot;red&amp;quot;, size=3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ggtree/subsetting.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Note: The example was from the discussion of &lt;a href=&#34;https://github.com/GuangchuangYu/ggtree/issues/13&#34;&gt;github
issue&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>comic phylogenetic tree with ggtree and comicR</title>
      <link>http://guangchuangyu.github.io/2015/09/comic-phylogenetic-tree-with-ggtree-and-comicr/</link>
      <pubDate>Tue, 08 Sep 2015 01:15:26 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/09/comic-phylogenetic-tree-with-ggtree-and-comicr/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.bioconductor.org/packages/release/bioc/html/ggtree.html&#34;&gt;ggtree&lt;/a&gt;
applies the concepts of grammar of graphic in phylogenetic tree
presentation and make it easy to add multiple layers of text and even
figures above a 🌲.&lt;/p&gt;

&lt;p&gt;Here, I cartoonize a phylogenetic tree generated by
&lt;a href=&#34;http://www.bioconductor.org/packages/release/bioc/html/ggtree.html&#34;&gt;ggtree&lt;/a&gt;
with &lt;a href=&#34;https://github.com/timelyportfolio/comicR&#34;&gt;comicR&lt;/a&gt;, which is a
funny package to generate comic (xkcd-like) graph in R. Have fun with
&lt;a href=&#34;http://www.bioconductor.org/packages/release/bioc/html/ggtree.html&#34;&gt;ggtree&lt;/a&gt;
and &lt;a href=&#34;https://github.com/timelyportfolio/comicR&#34;&gt;comicR&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;library(htmltools)
library(XML)
library(gridSVG)
library(comicR)

library(ggplot2)
library(ggtree)

p &amp;lt;- ggtree(rtree(30), layout=&amp;quot;fan&amp;quot;)  + 
   geom_text(aes(label=label, angle=angle), size=5, color=&amp;quot;purple&amp;quot;, vjust=-0.3)


p
svg &amp;lt;- grid.export(name=&amp;quot;&amp;quot;)$svg
tagList(
      tags$div(
        id = &amp;quot;ggtree_comic&amp;quot;,
        tags$style(&amp;quot;#ggtree_comic text {font-family:Chalkduster;}&amp;quot;),
        HTML(saveXML(svg)),
        comicR(&amp;quot;#ggtree_comic&amp;quot;, ff=5)
      )
    ) %&amp;gt;% html_print
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/98dbdcdbbb0e7fdb174fc1f40c611aeba2ee2bc5/Bioconductor/ggtree/comicTree.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>subview</title>
      <link>http://guangchuangyu.github.io/2015/08/subview/</link>
      <pubDate>Mon, 31 Aug 2015 03:17:48 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/08/subview/</guid>
      <description>&lt;p&gt;I implemented a function, &lt;em&gt;subview&lt;/em&gt;, in
&lt;a href=&#34;http://www.bioconductor.org/packages/release/bioc/html/ggtree.html&#34;&gt;ggtree&lt;/a&gt;
that make it easy to embed a subplot in ggplot.&lt;/p&gt;

&lt;p&gt;An example is shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;library(ggplot2)
library(ggtree)

dd &amp;lt;- data.frame(x=LETTERS[1:3], y=1:3)
pie &amp;lt;- ggplot(dd, aes(x=1, y, fill=x)) + 
             geom_bar(stat=&amp;quot;identity&amp;quot;, width=1) + 
                    coord_polar(theta=&amp;quot;y&amp;quot;) + theme_tree() + 
                          xlab(NULL) + ylab(NULL) + 
                               theme_transparent()

x &amp;lt;- sample(2:9)
y &amp;lt;- sample(2:9)
width &amp;lt;- sample(seq(0.05, 0.15, length.out=length(x)))
height &amp;lt;- width

p &amp;lt;- ggplot(data=data.frame(x=c(0, 10), y=c(0, 10)), aes(x, y))+geom_blank()
print(p)
for (i in seq_along(x)) {
    p %&amp;lt;&amp;gt;% subview(pie, x[i], y[i], width[i], height[i])
    print(p)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ggtree/subview.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With this function, we can plot a specific clade and add a subplot of
the whole topology; we can also add relative statistic graph above the
tree or to a specific node. It&amp;rsquo;s not specific to phylogenetic tree, it
works with all ggplot objects as demonstrated in the example.&lt;/p&gt;

&lt;p&gt;PS: &lt;a href=&#34;http://www.bioconductor.org/packages/ggtree&#34;&gt;ggtree&lt;/a&gt; is now
presented in &lt;a href=&#34;https://cran.r-project.org/web/views/Phylogenetics.html&#34;&gt;CRAN Task View:
Phylogenetics&lt;/a&gt;.
&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ggtree/taskview_cran.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;AND get its first citation.
&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ggtree/Screenshot%202015-08-04%2021.49.27.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ggtree annotate phylogenetic tree with local images</title>
      <link>http://guangchuangyu.github.io/2015/08/ggtree-annotate-phylogenetic-tree-with-local-images/</link>
      <pubDate>Sat, 01 Aug 2015 12:52:34 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/08/ggtree-annotate-phylogenetic-tree-with-local-images/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ggtree/annotation_image/Screenshot%202015-08-01%2020.53.50.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;http://www.bioconductor.org/packages/release/bioc/html/ggtree.html&#34;&gt;ggtree&lt;/a&gt;,
we provide a function &lt;em&gt;annotation_image&lt;/em&gt; for annotating phylogenetic
tree with images.&lt;/p&gt;

&lt;p&gt;To demonstrate the usage, I created a tree view from a random tree as
shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;set.seed(2015-08-01)
p &amp;lt;- ggtree(rtree(10)) + xlim(0, 5)+ ylim(0, 11)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need a &lt;em&gt;data.frame&lt;/em&gt; that contains information of taxa labels and
image paths. Here I created such a &lt;em&gt;data.frame&lt;/em&gt; containing image files
downloaded from phylopic.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;&amp;gt; img_info
  V1                                           V2
1 t1 25f165fa-f279-4f7c-9869-c55be251ffb8.512.png
2 t2 5d7ab302-960b-4db7-9dfd-215175a55906.512.png
3 t3 6fbe723c-3a6b-4d06-8680-bb2a52113df4.512.png
4 t4 d83c02ca-76ed-436b-83ae-7f98d7297be9.512.png
5 t5 ee764929-c865-44f6-b5db-b4e7d5693d1a.512.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Annotating tree with images is simple in
&lt;a href=&#34;http://www.bioconductor.org/packages/ggtree&#34;&gt;ggtree&lt;/a&gt; by using
&lt;em&gt;annotation_image&lt;/em&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;annotation_image(p, img_info)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ggtree/annotation_image/unnamed-chunk-2-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;By default, all the images will align to the right hand side. We can use
&lt;em&gt;align=FALSE&lt;/em&gt;, to disable it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;annotation_image(p, img_info, align=FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ggtree/annotation_image/unnamed-chunk-3-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can change the type and size of lines, as demonstrated below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;annotation_image(p, img_info, linetype=&amp;quot;dashed&amp;quot;, linesize=0.2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ggtree/annotation_image/unnamed-chunk-4-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The width of the images were controlled by width parameter, and the
height will automatically determined by image dimension.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;annotation_image(p, img_info, width = .2, linetype=&amp;quot;dashed&amp;quot;, linesize=0.2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ggtree/annotation_image/unnamed-chunk-5-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the following example, we add tip labels to the tree.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;p &amp;lt;- p+geom_tiplab(align=TRUE, linetype=&amp;quot;dashed&amp;quot;, linesize=.2)
print(p)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ggtree/annotation_image/unnamed-chunk-6-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If we also want to add the image and align them, we don&amp;rsquo;t want to show
the line added by &lt;em&gt;annotation_image&lt;/em&gt; function. This can be achieved by
setting &lt;em&gt;linetype=NULL&lt;/em&gt;. By default the images and tip labels will be
overlapped, we can move the images by &lt;em&gt;offset&lt;/em&gt; parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;p %&amp;gt;% annotation_image(img_info, width=.2, linetype=NULL, offset=.3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ggtree/annotation_image/unnamed-chunk-7-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>upsetplot in ChIPseeker</title>
      <link>http://guangchuangyu.github.io/2015/07/upsetplot-in-chipseeker/</link>
      <pubDate>Tue, 28 Jul 2015 06:45:01 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/07/upsetplot-in-chipseeker/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://guangchuangyu.github.io/2015/07/chipseeker-an-r/bioconductor-package-for-chip-peak-annotation-comparison-and-visualization/&#34;&gt;ChIPseeker&lt;/a&gt;
is an R package for ChIP peak annotation, comparison and visualization.&lt;/p&gt;

&lt;p&gt;We have implemented &lt;a href=&#34;http://guangchuangyu.github.io/2014/04/visualization-methods-in-chipseeker/&#34;&gt;several visualization
methods&lt;/a&gt;,
including
&lt;em&gt;&lt;a href=&#34;http://guangchuangyu.github.io/2014/10/multiple-annotation-in-chipseeker/&#34;&gt;vennpie&lt;/a&gt;&lt;/em&gt;
that was designed for viewing annotation overlap as shown below:
&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/10/2014-09-30-142735_471x303_scrot.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Not all overlap information can be demonstrated in vennpie.
&lt;a href=&#34;http://www.nature.com/nmeth/journal/v11/n8/full/nmeth.3033.html&#34;&gt;Upset&lt;/a&gt;
is an effective way to visualize sets and intersections. We import
&lt;em&gt;upset&lt;/em&gt; function from &lt;a href=&#34;https://github.com/cran/UpSetR&#34;&gt;UpSetR&lt;/a&gt; package
and implement &lt;em&gt;upsetplot&lt;/em&gt; function, that can visualize ChIP annotation
overlap directly with output of &lt;em&gt;annotatePeak&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;library(ChIPseeker)
peak_file &amp;lt;- getSampleFiles()[[4]]
x &amp;lt;- annotatePeak(peak_file)
upsetplot(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/5191b774b2bc432599c9e707c86da9c059589798/Bioconductor/ChIPseeker/upset.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We add a new parameter, &lt;em&gt;vennpie=FALSE&lt;/em&gt;, in upsetplot. If vennpie=TRUE,
a vennpie will be added as show below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/5191b774b2bc432599c9e707c86da9c059589798/Bioconductor/ChIPseeker/upset_vennpie.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Although upset contains more information, vennpie is more intuitive and
the final figure is more compact. More information is available at the
&lt;a href=&#34;http://www.bioconductor.org/packages/3.2/bioc/vignettes/ChIPseeker/inst/doc/ChIPseeker.html&#34;&gt;online
vignette&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;reference:07e5a5bc7f123188a27a1c1e28238bcc&#34;&gt;Reference&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Alexander Lex, and Gehlenborg Nils. “Points of View: Sets and
Intersections.” Nature Methods 11, no. 8 (August 2014): 779–779.
doi:&lt;a href=&#34;http://doi.org/10.1038/nmeth.3033&#34;&gt;10.1038/nmeth.3033&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Guangchuang Yu, Li-Gen Wang, and Qing-Yu He. “ChIPseeker: An
R/Bioconductor Package for ChIP Peak Annotation, Comparison and
Visualization.” Bioinformatics 31, no. 14 (July 15, 2015): 2382–83.
doi:&lt;a href=&#34;http://doi.org/10.1093/bioinformatics/btv145&#34;&gt;10.1093/bioinformatics/btv145&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Conway Jake, and Gehlenborg Nils, &amp;ldquo;UpSetR&amp;rdquo;,
&lt;a href=&#34;https://github.com/cran/UpSetR&#34;&gt;https://github.com/cran/UpSetR&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>flip and rotate branches in ggtree</title>
      <link>http://guangchuangyu.github.io/2015/07/flip-and-rotate-branches-in-ggtree/</link>
      <pubDate>Wed, 01 Jul 2015 02:51:34 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/07/flip-and-rotate-branches-in-ggtree/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;flip&lt;/em&gt;&lt;/strong&gt; function is a feature request from ggtree user. It accepts a
tree view and two node numbers and exchange the positions of the
selected clades.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;require(ggtree)
set.seed(2015-07-01)
tr &amp;lt;- rtree(30)
p &amp;lt;- ggtree(tr) + geom_text(aes(label=node))
gridExtra::grid.arrange(p, flip(p, 38, 33), ncol=2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ggtree/flip_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s chainable and all possible position adjustment can be achieved via
multiple flip operations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;flip(p, 38, 33) %&amp;gt;% flip(53, 58) %&amp;gt;% flip(32, 51)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/Bioconductor/ggtree/flip_animation.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s tedious to rotate a clade by 180 degree with several flip
operations, ggtree provides another function &lt;strong&gt;&lt;em&gt;rotate&lt;/em&gt;&lt;/strong&gt; that accepts a
selected node and rotate that branch by 180 degree.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;col = c(&amp;quot;black&amp;quot;, &amp;quot;firebrick&amp;quot;, &amp;quot;steelblue&amp;quot;)[groupClade(tr, c(33, 52))]
gridExtra::grid.arrange(ggtree(tr, color=col), 
                        ggtree(tr, color=col) %&amp;gt;% rotate(33) %&amp;gt;% rotate(52), 
                        ncol=2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/45fc101df9b7c711643fdb641d76f6822ad031a8/Bioconductor/ggtree/rotate.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ggtree with funny fonts</title>
      <link>http://guangchuangyu.github.io/2015/06/ggtree-with-funny-fonts/</link>
      <pubDate>Fri, 12 Jun 2015 06:19:56 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/06/ggtree-with-funny-fonts/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/showtext/index.html&#34;&gt;showtext&lt;/a&gt;
is a neat solution to use various types of fonts in R graphs and make it
easy to use funny fonts. With
&lt;a href=&#34;http://cran.r-project.org/web/packages/showtext/index.html&#34;&gt;showtext&lt;/a&gt;,
we can draw phylogenetic tree with different types of fonts even with
symbolic/icon fonts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;require(showtext)

font.add.google(&amp;quot;Gochi Hand&amp;quot;, &amp;quot;gochi&amp;quot;)
font.add.google(&amp;quot;Rock Salt&amp;quot;, &amp;quot;rock&amp;quot;)

link = &amp;quot;http://img.dafont.com/dl/?f=wm_people_1&amp;quot;;
download.file(link, &amp;quot;wmpeople1.zip&amp;quot;, mode = &amp;quot;wb&amp;quot;);
unzip(&amp;quot;wmpeople1.zip&amp;quot;);
font.add(&amp;quot;wmpeople1&amp;quot;, &amp;quot;wmpeople1.TTF&amp;quot;);

link = &amp;quot;http://img.dafont.com/dl/?f=emoticons&amp;quot;;
download.file(link, &amp;quot;emoticons.zip&amp;quot;, mode = &amp;quot;wb&amp;quot;);
unzip(&amp;quot;emoticons.zip&amp;quot;);
font.add(&amp;quot;emoticons&amp;quot;, &amp;quot;emoticons.ttf&amp;quot;);


showtext.auto()
set.seed(2015-05-14)

library(ggplot2)
library(ggtree)

tree &amp;lt;- rtree(30)
ggtree(tree, color=&amp;quot;darkgreen&amp;quot;) + geom_tiplab(family=&amp;quot;gochi&amp;quot;) + theme_classic() +
    theme(axis.text.x=element_text(size=rel(4), family=&amp;quot;emoticons&amp;quot;, color=&amp;quot;firebrick&amp;quot;)) +
        scale_y_continuous(breaks=seq(0, 30, 4), labels=letters[c(12:17, 20, 21)]) +
            theme(axis.text.y=element_text(size=rel(4), family=&amp;quot;wmpeople1&amp;quot;, color=&amp;quot;#FDAC4F&amp;quot;)) +
                annotate(&amp;quot;text&amp;quot;, x=2, y=18, label=&amp;quot;Have fun with ggtree!&amp;quot;,
                         family=&amp;quot;rock&amp;quot;, angle=30, size=12, color=&amp;quot;steelblue&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/f6217cb7815a824b0a273e6f5147f01a9ebb367a/Bioconductor/ggtree/ggtree_funny_font.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;download.file(&amp;quot;http://dl.dafont.com/dl/?f=people_freak&amp;quot;, &amp;quot;people_freak.zip&amp;quot;, mode=&amp;quot;wb&amp;quot;)
unzip(&amp;quot;people_freak.zip&amp;quot;)
font.add(&amp;quot;people_freak&amp;quot;, &amp;quot;People_freak.ttf&amp;quot;)
ggtree(rtree(10)) + geom_text(aes(label=node, color=isTip), family=&amp;quot;people_freak&amp;quot;, hjust=0) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/524ea41306f6d9a93251eaf9e193a264e5d4dbd4/Bioconductor/ggtree/ggtree_funny_font2.png&#34; alt=&#34;&#34; /&gt;
Funny fonts can be downloaded from
&lt;a href=&#34;http://www.dafont.com/search.php?q=icon&#34;&gt;1&lt;/a&gt;,
&lt;a href=&#34;http://www.dafont.com/search.php?q=people&#34;&gt;2&lt;/a&gt; and
&lt;a href=&#34;http://www.fontspace.com/category/people&#34;&gt;3&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>an example of drawing beast tree using ggtree</title>
      <link>http://guangchuangyu.github.io/2015/04/an-example-of-drawing-beast-tree-using-ggtree/</link>
      <pubDate>Wed, 01 Apr 2015 01:50:04 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/04/an-example-of-drawing-beast-tree-using-ggtree/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://beast.bio.ed.ac.uk/figtree&#34;&gt;FigTree&lt;/a&gt; is designed for viewing
beast output as demonstrated by their example data:
&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot%202015-03-10%2018.15.57.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;BEAST output is well supported by
&lt;a href=&#34;https://github.com/GuangchuangYu/ggtree&#34;&gt;ggtree&lt;/a&gt; and it&amp;rsquo;s easy to
reproduce such a tree view.
&lt;a href=&#34;https://github.com/GuangchuangYu/ggtree&#34;&gt;ggtree&lt;/a&gt; supports parsing beast
output by read.beast function. We can visualize the tree directly by
using ggtree function. Since this is a time scale tree, we can set the
parameter &lt;strong&gt;&lt;em&gt;mrsd&lt;/em&gt;&lt;/strong&gt; to most recent sampling date.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;require(ggplot2)
require(ggtree)
x &amp;lt;- read.beast(&amp;quot;/Applications/FigTree/influenza.tree&amp;quot;)
cols &amp;lt;- scale_color(x, by=&amp;quot;height&amp;quot;)
ggtree(x, right=TRUE, mrsd=&amp;quot;2005-04-02&amp;quot;, color=cols) + theme_tree2() +
    geom_text(aes(x=max(x), label=label), size=1, color=cols, hjust=-.3) +
        scale_x_continuous(breaks=c(1992, 1995, 1997, 2000, 2002, 2005), minor_breaks=seq(1992, 2005, 1)) +
            geom_segment(aes(xend=max(x)+.20, yend=y), linetype=&amp;quot;dotted&amp;quot;, size=.1, color=cols) +
                theme(panel.grid.major   = element_line(color=&amp;quot;black&amp;quot;, size=.2),
                      panel.grid.minor   = element_line(color=&amp;quot;grey&amp;quot;, size=.2),
                      panel.grid.major.y = element_blank(),
                      panel.grid.minor.y = element_blank()) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot%202015-03-10%2018.16.14.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ggtree updating a tree view using %&lt;% operator</title>
      <link>http://guangchuangyu.github.io/2015/02/ggtree-updating-a-tree-view-using--operator/</link>
      <pubDate>Tue, 10 Feb 2015 02:58:23 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/02/ggtree-updating-a-tree-view-using--operator/</guid>
      <description>&lt;p&gt;I am very exciting that I have received very positive feedback from
&lt;a href=&#34;https://twitter.com/AhmedMoustafa&#34;&gt;Ahmed Moustafa&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/sdwfrost&#34;&gt;Simon
Frost&lt;/a&gt;.
&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot-2015-02-10-10.27.27.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot-2015-02-10-10.27.07.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;https://github.com/GuangchuangYu/ggtree&#34;&gt;ggtree&lt;/a&gt; now has equipped with
a lot of new features. This time, I would like to introduce the replace
operator, &lt;code&gt;%&amp;lt;%&lt;/code&gt;. Suppose we have build a tree view using ggtree with
multiple layers, we don&amp;rsquo;t need to run the code again to build a new tree
view with another tree. In
&lt;a href=&#34;https://github.com/GuangchuangYu/ggtree&#34;&gt;ggtree&lt;/a&gt;, we provides an
operator, &lt;code&gt;%&amp;lt;%&lt;/code&gt;, for updating tree view.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;library(ggplot2)
library(ggtree)
ggtree(rtree(15)) %&amp;lt;% rtree(30)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot-2015-02-10-10.22.07.png&#34; alt=&#34;&#34; /&gt;
It supports different layout.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;ggtree(rtree(15), layout=&amp;quot;unrooted&amp;quot;, ladderize=FALSE) %&amp;lt;% rtree(45)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot-2015-02-10-10.23.48.png&#34; alt=&#34;&#34; /&gt;
It is chainable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;ggtree(rtree(15), layout=&amp;quot;cladogram&amp;quot;, ladderize=FALSE) %&amp;lt;% 
    rtree(30) %&amp;lt;% 
       rtree(45)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot-2015-02-10-10.23.14.png&#34; alt=&#34;&#34; /&gt;
It also supports multiple layers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;(ggtree(rtree(15), layout=&amp;quot;fan&amp;quot;) + 
    geom_point(aes(shape=isTip, color=isTip))) %&amp;lt;% 
      rtree(40)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot-2015-02-10-10.25.31.png&#34; alt=&#34;&#34; /&gt;
In the final example, we parse rst file from BaseML output and annotate
the tree with marginal_AA_subs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;rstfile &amp;lt;- system.file(&amp;quot;extdata/PAML_Baseml&amp;quot;, &amp;quot;rst&amp;quot;, package=&amp;quot;ggtree&amp;quot;)
tipfas &amp;lt;- system.file(&amp;quot;extdata&amp;quot;, &amp;quot;pa.fas&amp;quot;, package=&amp;quot;ggtree&amp;quot;)
rst &amp;lt;- read.paml_rst(rstfile, tipfas)

p &amp;lt;- plot(rst, annotation=&amp;quot;marginal_AA_subs&amp;quot;, annotation.color=&amp;quot;steelblue&amp;quot;)
print(p)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot-2015-02-10-10.51.17.png&#34; alt=&#34;&#34; /&gt;
We have ancestral sequences inferred from CodeML with the same tree. We
can use this new data to update the tree view.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;rstfile &amp;lt;- system.file(&amp;quot;extdata/PAML_Codeml&amp;quot;, &amp;quot;rst&amp;quot;, package=&amp;quot;ggtree&amp;quot;)
rst &amp;lt;- read.paml_rst(rstfile, tipfas)
p %&amp;lt;% rst
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2015/Screenshot-2015-02-10-10.53.41.png&#34; alt=&#34;&#34; /&gt;
In these two figures, we can found that they have different evolution
distances, and substitutions inferred from BASEML and CODEML are
slightly different.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ggtree in Bioconductor 3.1</title>
      <link>http://guangchuangyu.github.io/2015/01/ggtree-in-bioconductor-3.1/</link>
      <pubDate>Mon, 19 Jan 2015 03:50:23 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2015/01/ggtree-in-bioconductor-3.1/</guid>
      <description>&lt;p&gt;I am very glad that &lt;a href=&#34;http://guangchuangyu.github.io/2014/12/ggtree/&#34;&gt;ggtree&lt;/a&gt; is now
available via Bioconductor. This is my 6th Bioconductor package.
&lt;a href=&#34;http://guangchuangyu.github.io/2014/12/ggtree/&#34;&gt;ggtree&lt;/a&gt; now supports parsing output
files from BEAST, PAML, HYPHY, EPA and PPLACER and can annotate
phylogenetic tree directly using plot methods. Now you can use the
following
&lt;a href=&#34;http://guangchuangyu.github.io/2014/12/ggtree/&#34;&gt;command&lt;/a&gt; to
install ggtree:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;install.packages(&amp;quot;ggtree&amp;quot;,
                 repos = &amp;quot;http://www.bioconductor.org/packages/devel/bioc&amp;quot;,
                 type  = &amp;quot;source&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find out more at
&lt;a href=&#34;http://www.bioconductor.org/packages/3.1/bioc/html/ggtree.html&#34;&gt;http://www.bioconductor.org/packages/3.1/bioc/html/ggtree.html&lt;/a&gt; and
check out the vignette,
&lt;a href=&#34;http://www.bioconductor.org/packages/3.1/bioc/vignettes/ggtree/inst/doc/ggtree.html&#34;&gt;http://www.bioconductor.org/packages/3.1/bioc/vignettes/ggtree/inst/doc/ggtree.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>viewing and annotating phylogenetic tree with ggtree</title>
      <link>http://guangchuangyu.github.io/2014/12/viewing-and-annotating-phylogenetic-tree-with-ggtree/</link>
      <pubDate>Sun, 21 Dec 2014 08:00:08 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2014/12/viewing-and-annotating-phylogenetic-tree-with-ggtree/</guid>
      <description>&lt;p&gt;When I need to annotate nucleotide substitutions in the phylogenetic
tree, I found that all the software are designed to display the tree but
not annotating it. Some of them may support annotating the tree with
specific data such as bootstrap values, but they are restricted to a few
supported data types. It is hard/impossible to inject user specific
data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/12/2014-12-21-145753_579x436_scrot.png&#34; alt=&#34;&#34; /&gt;
I decided to implement my own one by extending the ggplot2 package.
There are other R packages that implemented tree viewer using ggplot2,
including OutbreakTools, phyloseq and ggphylo, but all of them only
create complex tree view function for their specific needs. They are
just classical tree viewers that only viewing the tree or annotating a
specific data type. The good parts of ggplot2 are not available in these
packages. They lack of flexibilities of annotating phylogenetic tree by
diverse user inputs. I develop ggtree, which is based on grammar of
graphics and will takes all the good parts of ggplot2.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;nwk &amp;lt;- system.file(&amp;quot;extdata&amp;quot;, &amp;quot;sample.nwk&amp;quot;, package = &amp;quot;ggtree&amp;quot;)
library(ape)
tree &amp;lt;- read.tree(nwk)
library(ggplot2)
library(ggtree)
ggplot(tree, aes(x, y)) + geom_tree() + theme_tree() + xlab(&amp;quot;&amp;quot;) + ylab(&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It extends ggplot2 to support tree objects and implements a geom_tree()
layer to draw the tree.&lt;/p&gt;

&lt;p&gt;The ggtree package provides a function, ggtree, for shortcut of
&lt;code&gt;ggplot()+geom_tree()+theme_tree()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It supports several tree objects including phylo that defined in ape,
phylo4 that defined in phylobase and jplace that defined within the
ggtree package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;p1 &amp;lt;- ggtree(tree) + ggtitle(&amp;quot;tree of phylo object&amp;quot;)
tr2 &amp;lt;- as(tree, &amp;quot;phylo4&amp;quot;)
p2 &amp;lt;- ggtree(tr2) + ggtitle(&amp;quot;tree of phylo4 object&amp;quot;)
jpf &amp;lt;- system.file(&amp;quot;extdata&amp;quot;, &amp;quot;sample.jplace&amp;quot;, package=&amp;quot;ggtree&amp;quot;)
jp &amp;lt;- read.jplace(jpf)
p3 &amp;lt;- ggtree(jp) + ggtitle(&amp;quot;tree of jplace object&amp;quot;)
library(gridExtra)
grid.arrange(p1, p2, p3, ncol=3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/12/tree_objects.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With this implementation, it is possible to inject user input. But is it
easy? The answer is yes and no. It may depends on user&amp;rsquo;s ggplot2
experiences. To place the input data at the correct position, you should
know how the tree was layout. It may be easy for an experienced user,
but hard for newbie. Most of us are impatient and reluctant to learn, so
I should create a way that is easy to follow. It&amp;rsquo;s not a good idea to
implement unnecessary geom_XXX layer, for it violates the great idea of
taking all the good parts of ggplot2, and it will violate the consistent
function calls of &lt;code&gt;geom_XXX&lt;/code&gt;. Thanks to my sleep disorder, I came out
with an operator &lt;strong&gt;&lt;code&gt;%&amp;lt;+%&lt;/code&gt;&lt;/strong&gt; for injecting input data to the tree view.
After the injection, the data is visible to all the geom_XXX layers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;p &amp;lt;- ggtree(tree)

print(dd)
taxa    place   value
M   NA  55.9
A   GZ  65.6
C   GZ  59.3
I   CZ  78.5
E   GZ  62.9
D   GZ  64.1
J   CZ  62.3
K   CZ  79.1
B   GZ  89.0
L   CZ  57.1
G   HK  66.4
H   HK  61.6
F   HK  59.9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suppose we have a tree view p, and input data dd, we can attach the data
to the tree and add a layer of tip labels and colored by place.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;p &amp;lt;- p %&amp;lt;+% dd + geom_text(aes(color=place, label=label), hjust=-0.5)
print(p)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/12/tree_place.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once the data is attached, it is always attached, and we can add more
layers easily.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;p + geom_text(aes(color=place, label=place), hjust=1, vjust=-0.4, size=3) +
  geom_text(aes(color=place, label=value), hjust=1, vjust=1.4, size=3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/12/tree_place2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The package is now available via github,
&lt;a href=&#34;https://github.com/GuangchuangYu/ggtree&#34;&gt;https://github.com/GuangchuangYu/ggtree&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Suggestions, comments and feature request are all welcome. Let&amp;rsquo;s make it
an easy to use and feature-riched package for viewing and annotating
phylogenetic trees.&lt;/p&gt;

&lt;p&gt;At last, wish you a merry christmas :)
&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/12/IMG_5755.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>multiple annotation in ChIPseeker</title>
      <link>http://guangchuangyu.github.io/2014/10/multiple-annotation-in-chipseeker/</link>
      <pubDate>Wed, 01 Oct 2014 13:00:33 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2014/10/multiple-annotation-in-chipseeker/</guid>
      <description>

&lt;h3 id=&#34;nearest-gene-annotation:211662300f8731372460bacaae7937b5&#34;&gt;Nearest gene annotation&lt;/h3&gt;

&lt;p&gt;Almost all annotation software calculate the distance of a peak to the
nearest TSS and assign the peak to that gene. This can be misleading, as
binding sites might be located between two start sites of different
genes or hit different genes which have the same TSS location in the
genome.&lt;/p&gt;

&lt;p&gt;The function &lt;em&gt;annotatePeak&lt;/em&gt; provides option to assign genes with a max
distance cutoff and all genes within this distance were reported for
each peak.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;&amp;gt; anno = annotatePeak(getSampleFiles()[[4]], addFlankGeneInfo=TRUE, flankDistance=5000)
&amp;gt;&amp;gt; loading peak file...              2014-09-30 01:12:09 PM 
&amp;gt;&amp;gt; preparing features information...         2014-09-30 01:12:09 PM 
&amp;gt;&amp;gt; identifying nearest features...       2014-09-30 01:12:10 PM 
&amp;gt;&amp;gt; calculating distance from peak to TSS...  2014-09-30 01:12:11 PM 
&amp;gt;&amp;gt; assigning genomic annotation...       2014-09-30 01:12:11 PM 
&amp;gt;&amp;gt; adding flank feature information from peaks...2014-09-30 01:12:37 PM 
&amp;gt;&amp;gt; assigning chromosome lengths          2014-09-30 01:12:39 PM 
&amp;gt;&amp;gt; done...                   2014-09-30 01:12:39 PM 
&amp;gt; head(as.GRanges(anno))
GRanges object with 6 ranges and 14 metadata columns:
      seqnames             ranges strand |          V4        V5
                      |     
  [1]     chr1 [ 815092,  817883]      * | MACS_peak_1    295.76
  [2]     chr1 [1243287, 1244338]      * | MACS_peak_2     63.19
  [3]     chr1 [2979976, 2981228]      * | MACS_peak_3    100.16
  [4]     chr1 [3566181, 3567876]      * | MACS_peak_4    558.89
  [5]     chr1 [3816545, 3818111]      * | MACS_peak_5     57.57
  [6]     chr1 [6304864, 6305704]      * | MACS_peak_6     54.57
             annotation  geneChr geneStart   geneEnd geneLength geneStrand
                    
  [1] Distal Intergenic     chr1    803451    812182       8732          -
  [2]  Promoter (&amp;lt;=1kb)     chr1   1243994   1247057       3064          +
  [3]  Promoter (&amp;lt;=1kb)     chr1   2976181   2980350       4170          -
  [4]  Promoter (&amp;lt;=1kb)     chr1   3547331   3566671      19341          -
  [5]  Promoter (&amp;lt;=1kb)     chr1   3816968   3832011      15044          +
  [6]  Promoter (1-2kb)     chr1   6304252   6305638       1387          +
           geneId transcriptId distanceToTSS
             
  [1]      284593   uc001abt.4         -5701
  [2]      126789   uc001aed.3             0
  [3]      440556   uc001aka.3             0
  [4]       49856   uc001ako.3             0
  [5]   100133612   uc001alg.3             0
  [6]      390992   uc009vly.2          1452
                                                                                                                                                               flank_txIds
                                                                                                                                                               
  [1]                                                                                                                                                           uc001abt.4
  [2] uc001aea.2;uc001aeb.2;uc001aec.1;uc001aed.3;uc010nyi.2;uc009vjx.3;uc009vjy.1;uc001aee.2;uc001aef.2;uc001aeg.2;uc001aeh.2;uc001aei.2;uc001aek.2;uc009vjz.2;uc010nyj.2
  [3]                                                                                                    uc001aka.3;uc010nzg.1;uc001akc.3;uc001ake.3;uc001akf.3;uc009vlh.3
  [4]                                                                   uc001ako.3;uc001akn.3;uc010nzi.2;uc001akp.3;uc021ofb.1;uc021ofc.1;uc021ofd.1;uc021ofe.1;uc021off.1
  [5]                                                                                                    uc001alg.3;uc010nzo.2;uc001alh.4;uc001alf.3;uc009vls.3;uc031pkz.1
  [6]                                                                                                                                                uc001amp.2;uc009vly.2
                                                                                        flank_geneIds
                                                                                          
  [1]                                                                                          284593
  [2] 116983;116983;116983;126789;126789;126789;54973;54973;54973;54973;54973;54973;54973;54973;54973
  [3]                                                           440556;440556;63976;63976;63976;63976
  [4]                                                 49856;49856;49856;7161;7161;7161;7161;7161;7161
  [5]                                              100133612;100133612;100133612;339448;339448;339448
  [6]                                                                                   387509;390992
                                                           flank_gene_distances
                                                                    
  [1]                                                                     -2910
  [2] -1978;-18;0;0;0;-128;8492;15729;15729;15729;15729;15729;15729;15729;15729
  [3]                                               0;0;-4514;-4514;-4514;-4514
  [4]                                 0;0;0;-1253;-1253;-1253;-1253;-1253;-1253
  [5]                                                               0;0;0;0;0;0
  [6]                                                                   15331;0
  -------
  seqinfo: 24 sequences from hg19 genome
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three extra columns, &lt;em&gt;flank_txIds&lt;/em&gt;, &lt;em&gt;flank_geneIds&lt;/em&gt;,
&lt;em&gt;flank_gene_distances&lt;/em&gt; were added if parameter &lt;em&gt;addFlankGeneInfo&lt;/em&gt; is
set to &lt;em&gt;TRUE&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;genomic-annotation:211662300f8731372460bacaae7937b5&#34;&gt;Genomic annotation&lt;/h3&gt;

&lt;p&gt;The annotation column annotates the genomic location of a given peak.
Since some annotations overlap, they are assigned based on the following
priority.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Promoter (defined by tssRegion parameter)&lt;/li&gt;
&lt;li&gt;5&amp;rsquo; UTR&lt;/li&gt;
&lt;li&gt;3&amp;rsquo; UTR&lt;/li&gt;
&lt;li&gt;Exon&lt;/li&gt;
&lt;li&gt;Intron&lt;/li&gt;
&lt;li&gt;Downstream (immediate downstream of a gene, within 3kb)&lt;/li&gt;
&lt;li&gt;Distal Intergenic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have implemented &lt;a href=&#34;http://guangchuangyu.github.io/2014/04/visualization-methods-in-chipseeker/&#34;&gt;plotAnnoPie and
plotAnnoBar&lt;/a&gt;
to visualize their distribution. I am wondering how to visualize the
annotation overlap and found &lt;a href=&#34;http://onetipperday.blogspot.hk/2014/09/how-to-draw-venn-pie-agram-multi-layer.html&#34;&gt;venn
pie-agram&lt;/a&gt;
can partially solve this issue. It&amp;rsquo;s hard/impossible to visualize all
the overlap information within one vennpie plot.&lt;/p&gt;

&lt;p&gt;I employed the vennpie to ChIPseeker, and now with the vennpie function,
we can visualize some of the overlap annotations.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vennpie(anno)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/10/2014-09-30-142735_471x303_scrot.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In order to manage complex data, &lt;em&gt;annotatePeak&lt;/em&gt; now output a S4 object.
Users can use &lt;em&gt;as.GRanges&lt;/em&gt; to convert it to &lt;em&gt;as.GRanges&lt;/em&gt; object or
&lt;em&gt;as.data.frame&lt;/em&gt; to convert it to &lt;em&gt;data.frame&lt;/em&gt; and then the output can be
exported by &lt;em&gt;write.table&lt;/em&gt; function.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use ggplot2</title>
      <link>http://guangchuangyu.github.io/2014/05/use-ggplot2/</link>
      <pubDate>Sun, 11 May 2014 06:17:56 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2014/05/use-ggplot2/</guid>
      <description>

&lt;h3 id=&#34;why-use-ggplot2:c38c63fac86d2290b6bc01da39216614&#34;&gt;Why use ggplot2&lt;/h3&gt;

&lt;p&gt;ggplot2是我见过最human friendly的画图软件，这得益于Leland
Wilkinson在他的著作《&lt;a href=&#34;http://book.douban.com/subject/10123863/&#34;&gt;The Grammar of
Graphics&lt;/a&gt;》中提出了一套图形语法，把图形元素抽象成可以自由组合的成分，Hadley
Wickham把这套想法在R中实现。&lt;/p&gt;

&lt;p&gt;为什么要学习ggplot2，可以参考&lt;a href=&#34;http://book.douban.com/subject/24527091/&#34;&gt;ggplot2:
数据分析与图形艺术&lt;/a&gt;的&lt;a href=&#34;https://github.com/cosname/ggplot2-translation/blob/master/preface.md&#34;&gt;序言&lt;/a&gt;（btw:
在序言的最后，我被致谢了）。&lt;/p&gt;

&lt;p&gt;Hadley
Wickham也给出&lt;a href=&#34;https://github.com/hadley/ggplot2/wiki/Why-use-ggplot2&#34;&gt;一堆理由&lt;/a&gt;让我们说服自己，我想再补充一点，Hadley
Wickham是学医出身的，做为学生物出身的人有什么理由不支持呢:)&lt;/p&gt;

&lt;p&gt;ggplot2基本要素&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;数据（Data）和映射（Mapping）&lt;/li&gt;
&lt;li&gt;几何对象（Geometric）&lt;/li&gt;
&lt;li&gt;标尺（Scale）&lt;/li&gt;
&lt;li&gt;统计变换（Statistics）&lt;/li&gt;
&lt;li&gt;坐标系统（Coordinante）&lt;/li&gt;
&lt;li&gt;图层（Layer）&lt;/li&gt;
&lt;li&gt;分面（Facet）&lt;/li&gt;
&lt;li&gt;主题（Theme）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里将从这些基本要素对ggplot2进行介绍。&lt;/p&gt;

&lt;h3 id=&#34;数据-data-和映射-mapping:c38c63fac86d2290b6bc01da39216614&#34;&gt;数据（Data）和映射（Mapping)&lt;/h3&gt;

&lt;p&gt;下面以一份钻石的数据为例，这份数据非常大，随机取一个子集来画图。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;require(ggplot2)
data(diamonds)
set.seed(42)
small &amp;lt;- diamonds[sample(nrow(diamonds), 1000), ]
head(small)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##       carat       cut color clarity depth table price    x    y    z
## 49345  0.71 Very Good     H     SI1  62.5    60  2096 5.68 5.75 3.57
## 50545  0.79   Premium     H     SI1  61.8    59  2275 5.97 5.91 3.67
## 15434  1.03     Ideal     F     SI1  62.4    57  6178 6.48 6.44 4.03
## 44792  0.50     Ideal     E     VS2  62.2    54  1624 5.08 5.11 3.17
## 34614  0.27     Ideal     E     VS1  61.6    56   470 4.14 4.17 2.56
## 27998  0.30   Premium     E     VS2  61.7    58   658 4.32 4.34 2.67
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(small)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##      carat              cut      color      clarity        depth     
##  Min.   :0.220   Fair     : 28   D:121   SI1    :258   Min.   :55.2  
##  1st Qu.:0.400   Good     : 88   E:186   VS2    :231   1st Qu.:61.0  
##  Median :0.710   Very Good:227   F:164   SI2    :175   Median :61.8  
##  Mean   :0.819   Premium  :257   G:216   VS1    :141   Mean   :61.7  
##  3rd Qu.:1.070   Ideal    :400   H:154   VVS2   : 91   3rd Qu.:62.5  
##  Max.   :2.660                   I:106   VVS1   : 67   Max.   :72.2  
##                                  J: 53   (Other): 37                 
##      table          price             x              y       
##  Min.   :50.1   Min.   :  342   Min.   :3.85   Min.   :3.84  
##  1st Qu.:56.0   1st Qu.:  990   1st Qu.:4.74   1st Qu.:4.76  
##  Median :57.0   Median : 2595   Median :5.75   Median :5.78  
##  Mean   :57.4   Mean   : 4111   Mean   :5.79   Mean   :5.79  
##  3rd Qu.:59.0   3rd Qu.: 5495   3rd Qu.:6.60   3rd Qu.:6.61  
##  Max.   :65.0   Max.   :18795   Max.   :8.83   Max.   :8.87  
##                                                              
##        z       
##  Min.   :2.33  
##  1st Qu.:2.92  
##  Median :3.55  
##  Mean   :3.57  
##  3rd Qu.:4.07  
##  Max.   :5.58  
## 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;画图实际上是把数据中的变量映射到图形属性上。以克拉(carat)数为X轴变量，价格(price)为Y轴变量。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p &amp;lt;- ggplot(data = small, mapping = aes(x = carat, y = price))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面这行代码把数据映射XY坐标轴上，需要告诉ggplot2，这些数据要映射成什么样的几何对象，下面以散点为例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p + geom_point()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;几何对象将在下面的小节介绍，这一节，关注的是数据和图形属性之间的映射。&lt;/p&gt;

&lt;p&gt;如果想将切工（cut）映射到形状属性。只需要：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p &amp;lt;- ggplot(data=small, mapping=aes(x=carat, y=price, shape=cut))
p+geom_point()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig2.png&#34; alt=&#34;&#34; /&gt;
再比如我想将钻石的颜色（color）映射颜色属性：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p &amp;lt;- ggplot(data=small, mapping=aes(x=carat, y=price, shape=cut, colour=color))
p+geom_point()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;几何对象-geometric:c38c63fac86d2290b6bc01da39216614&#34;&gt;几何对象（Geometric）&lt;/h3&gt;

&lt;p&gt;在上面的例子中，各种属性映射由ggplot函数执行，只需要加一个图层，使用geom_point()告诉ggplot要画散点，于是所有的属性都映射到散点上。&lt;/p&gt;

&lt;p&gt;geom_point()完成的就是几何对象的映射，ggplot2提供了各种几何对象映射，如geom_histogram用于直方图，geom_bar用于画柱状图，geom_boxplot用于画箱式图等等。&lt;/p&gt;

&lt;p&gt;不同的几何对象，要求的属性会有些不同，这些属性也可以在几何对象映射时提供，比如上一图，也可以用以下语法来画：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p &amp;lt;- ggplot(small)
p+geom_point(aes(x=carat, y=price, shape=cut, colour=color))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ggplot2支持图层，我通常把不同的图层中共用的映射提供给ggplot函数，而某一几何对象才需要的映射参数提供给geom_xxx函数。&lt;/p&gt;

&lt;p&gt;这一小节我们来看一下各种常用的几何对象。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;直方图&lt;/strong&gt; 直方图最容易，提供一个x变量，画出数据的分布。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(small)+geom_histogram(aes(x=price))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;同样可以根据另外的变量给它填充颜色，比如按不同的切工：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(small)+geom_histogram(aes(x=price, fill=cut))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig5.png&#34; alt=&#34;&#34; /&gt;
也可以将其分开，side-by-side地画直方图。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(small)+geom_histogram(aes(x=price, fill=cut), position=&amp;quot;dodge&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig6.png&#34; alt=&#34;&#34; /&gt;
还可以使用position=&amp;ldquo;fill&amp;rdquo;，按照相对比例来画。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(small)+geom_histogram(aes(x=price, fill=cut), position=&amp;quot;fill&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;柱状图&lt;/strong&gt;
柱状图非常适合于画分类变量。在这里以透明度（clarity）变量为例。按照不同透明度的钻石的数目画柱状图。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(small)+geom_bar(aes(x=clarity))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig8.png&#34; alt=&#34;&#34; /&gt;
柱状图两个要素，一个是分类变量，一个是数目，也就是柱子的高度。数目在这里不用提供，因为ggplot2会通过x变量计算各个分类的数目。&lt;/p&gt;

&lt;p&gt;当然你想提供也是可以的，通过stat参数，可以让geom_bar按指定高度画图，比如以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot()+geom_bar(aes(x=c(LETTERS[1:3]),y=1:3), stat=&amp;quot;identity&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig24.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;柱状图和直方图是很像的，直方图把连续型的数据按照一个个等长的分区（bin）来切分，然后计数，画柱状图。而柱状图是分类数据，按类别计数。我们可以用前面直方图的参数来画side-by-side的柱状图，填充颜色或者按比例画图，它们是高度一致的。&lt;/p&gt;

&lt;p&gt;柱状图是用来表示计数数据的，但在生物界却被经常拿来表示均值，加上误差来表示数据分布，这可以通常图层来实现，我将在图层一节中给出实例。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;密度函数图&lt;/strong&gt;
说到直方图，就不得不说密度函数图，数据和映射和直方图是一样的，唯一不同的是几何对象，geom_histogram告诉ggplot要画直方图，而geom_density则说我们要画密度函数图，在我们熟悉前面语法的情况下，很容易画出：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(small)+geom_density(aes(x=price, colour=cut))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(small)+geom_density(aes(x=price,fill=clarity))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig10.png&#34; alt=&#34;&#34; /&gt;
colour参数指定的是曲线的颜色，而fill是往曲线下面填充颜色。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;箱式图&lt;/strong&gt;
数据量比较大的时候，用直方图和密度函数图是表示数据分布的好方法，而在数据量较少的时候，比如很多的生物实验，很多时候大家都是使用柱状图+errorbar的形式来表示，不过这种方法的信息量非常低，被&lt;a href=&#34;http://guangchuangyu.github.io/2014/03/boxplot/&#34;&gt;Nature
Methods吐槽&lt;/a&gt;，这种情况推荐使用boxplot。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(small)+geom_boxplot(aes(x=cut, y=price,fill=color))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;geom_boxplot将数据映射到箱式图上，上面的代码，我们应该很熟悉了，按切工(cut)分类，对价格(price)变量画箱式图，再分开按照color变量填充颜色。
&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig11.png&#34; alt=&#34;&#34; /&gt;
ggplot2提供了很多的geom_xxx函数，可以满足我们对各种图形绘制的需求。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;geom_abline     geom_area   
geom_bar        geom_bin2d
geom_blank      geom_boxplot    
geom_contour    geom_crossbar
geom_density    geom_density2d  
geom_dotplot    geom_errorbar
geom_errorbarh  geom_freqpoly   
geom_hex        geom_histogram
geom_hline      geom_jitter     
geom_line       geom_linerange
geom_map        geom_path   
geom_point      geom_pointrange
geom_polygon    geom_quantile   
geom_raster     geom_rect
geom_ribbon     geom_rug    
geom_segment    geom_smooth
geom_step       geom_text   
geom_tile       geom_violin
geom_vline
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;标尺-scale:c38c63fac86d2290b6bc01da39216614&#34;&gt;标尺（Scale）&lt;/h3&gt;

&lt;p&gt;前面我们已经看到了，画图就是在做映射，不管是映射到不同的几何对象上，还是映射各种图形属性。这一小节介绍标尺，在对图形属性进行映射之后，使用标尺可以控制这些属性的显示方式，比如坐标刻度，可能通过标尺，将坐标进行对数变换；比如颜色属性，也可以通过标尺，进行改变。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(small)+geom_point(aes(x=carat, y=price, shape=cut, colour=color))+scale_y_log10()+scale_colour_manual(values=rainbow(7))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig12.png&#34; alt=&#34;&#34; /&gt;
以数据（Data）和映射（Mapping)一节中所画散点图为例，将Y轴坐标进行log10变换，再自己定义颜色为彩虹色。&lt;/p&gt;

&lt;h3 id=&#34;统计变换-statistics:c38c63fac86d2290b6bc01da39216614&#34;&gt;统计变换（Statistics）&lt;/h3&gt;

&lt;p&gt;统计变换对原始数据进行某种计算，然后在图上表示出来，例如对散点图上加一条回归线。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(small, aes(x=carat, y=price))+geom_point()+scale_y_log10()+stat_smooth()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig13.png&#34; alt=&#34;&#34; /&gt;
这里就不按颜色、切工来分了，不然ggplot会按不同的分类变量分别做回归，图就很乱，如果我们需要这样做，我们可以使用分面，这个将在后面介绍。&lt;/p&gt;

&lt;p&gt;这里，aes所提供的参数，就通过ggplot提供，而不是提供给geom_point，因为ggplot里的参数，相当于全局变量，geom_point()和stat_smooth()都知道x,y的映射，如果只提供给geom_point()，则相当于是局部变量，geom_point知道这种映射，而stat_smooth不知道，当然你再给stat_smooth也提供x,y的映射，不过共用的映射，还是提供给ggplot好。
ggplot2提供了多种统计变换方式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stat_abline       stat_contour      stat_identity     stat_summary
stat_bin          stat_density      stat_qq           stat_summary2d
stat_bin2d        stat_density2d    stat_quantile     stat_summary_hex
stat_bindot       stat_ecdf         stat_smooth       stat_unique
stat_binhex       stat_function     stat_spoke        stat_vline
stat_boxplot      stat_hline        stat_sum          stat_ydensity
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;统计变换是非常重要的功能，我们可以自己写函数，基于原始数据做某种计算，并在图上表现出来，也可以通过它改变geom_xxx函数画图的默认统计参数。
比如我在&lt;a href=&#34;http://www.sciencedirect.com/science/article/pii/S1874391912007567&#34;&gt;Proteomic investigation of the interactome of FMNL1 in
hematopoietic cells unveils a role in calcium-dependent membrane
plasticity&lt;/a&gt;的图一中，就把boxplot的中位线替换成了平均值来作图。&lt;/p&gt;

&lt;h3 id=&#34;坐标系统-coordinante:c38c63fac86d2290b6bc01da39216614&#34;&gt;坐标系统（Coordinante）&lt;/h3&gt;

&lt;p&gt;坐标系统控制坐标轴，可以进行变换，例如XY轴翻转，笛卡尔坐标和极坐标转换，以满足我们的各种需求。&lt;/p&gt;

&lt;p&gt;坐标轴翻转由coord_flip()实现&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(small)+geom_bar(aes(x=cut, fill=cut))+coord_flip()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig14.png&#34; alt=&#34;&#34; /&gt;
而转换成极坐标可以由coord_polar()实现：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(small)+geom_bar(aes(x=factor(1), fill=cut))+coord_polar(theta=&amp;quot;y&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2.fig15.png&#34; alt=&#34;&#34; /&gt;
这也是为什么之前介绍常用图形画法时没有提及饼图的原因，饼图实际上就是柱状图，只不过是使用极坐标而已，柱状图的高度，对应于饼图的弧度，饼图并不推荐，因为人类的眼睛比较弧度的能力比不上比较高度（柱状图）&lt;/p&gt;

&lt;p&gt;还可以画靶心图：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(small)+geom_bar(aes(x=factor(1), fill=cut))+coord_polar()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig16.png&#34; alt=&#34;&#34; /&gt;
以及风玫瑰图(windrose)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(small)+geom_bar(aes(x=clarity, fill=cut))+coord_polar()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig17.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;图层-layer:c38c63fac86d2290b6bc01da39216614&#34;&gt;图层（Layer）&lt;/h3&gt;

&lt;p&gt;photoshop流行的原因在于PS
3.0时引入图层的概念，ggplot的牛B之处在于使用+号来叠加图层，这堪称是泛型编程的典范。
在前面散点图上，我们已经见识过，加上了一个回归线拟合的图层。&lt;/p&gt;

&lt;p&gt;有了图层的概念，使用ggplot画起图来，就更加得心应手。&lt;/p&gt;

&lt;p&gt;做为图层的一个很好的例子是&lt;a href=&#34;http://guangchuangyu.github.io/2011/08/the-batman-equation/&#34;&gt;蝙蝠侠logo&lt;/a&gt;，batman
logo由6个函数组成，在下面的例子中，我先画第一个函数，之后再加一个图层画第二个函数，不断重复这一过程，直到六个函数全部画好。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;require(ggplot2)
f1 &amp;lt;- function(x) {
    y1 &amp;lt;- 3*sqrt(1-(x/7)^2)
    y2 &amp;lt;- -3*sqrt(1-(x/7)^2)
    y &amp;lt;- c(y1,y2)
    d &amp;lt;- data.frame(x=x,y=y)
    d &amp;lt;- d[d$y &amp;gt; -3*sqrt(33)/7,]
    return(d)
}
 
x1 &amp;lt;- c(seq(3, 7, 0.001), seq(-7, -3, 0.001))
d1 &amp;lt;- f1(x1)
p1 &amp;lt;- ggplot(d1,aes(x,y)) + geom_point(color=&amp;quot;red&amp;quot;) +xlab(&amp;quot;&amp;quot;) + ylab(&amp;quot;&amp;quot;) + theme_bw()
 
x2 &amp;lt;- seq(-4,4, 0.001)
y2 &amp;lt;- abs(x2/2)-(3*sqrt(33)-7)*x2^2/112-3 + sqrt(1-(abs(abs(x2)-2)-1)^2)
d2 &amp;lt;- data.frame(x2=x2, y2=y2)
p2 &amp;lt;- p1 + geom_point(data=d2, aes(x=x2,y=y2), color=&amp;quot;yellow&amp;quot;)
 
x3 &amp;lt;- c(seq(0.75,1,0.001), seq(-1,-0.75,0.001))
y3 &amp;lt;- 9-8*abs(x3)
d3 &amp;lt;- data.frame(x3=x3, y3=y3)
p3 &amp;lt;- p2+geom_point(data=d3, aes(x=x3,y=y3), color=&amp;quot;green&amp;quot;)
 
x4 &amp;lt;- c(seq(0.5,0.75,0.001), seq(-0.75,-0.5,0.001))
y4 &amp;lt;- 3*abs(x4)+0.75
d4 &amp;lt;- data.frame(x4=x4,y4=y4)
p4 &amp;lt;- p3+geom_point(data=d4, aes(x=x4,y=y4), color=&amp;quot;steelblue&amp;quot;)
  
x5 &amp;lt;- seq(-0.5,0.5,0.001)
y5 &amp;lt;- rep(2.25,length(x5))
d5 &amp;lt;- data.frame(x5=x5,y5=y5)
p5 &amp;lt;- p4+geom_point(data=d5, aes(x=x5,y=y5))
 
x6 &amp;lt;- c(seq(-3,-1,0.001), seq(1,3,0.001))
y6 &amp;lt;- 6 * sqrt(10)/7 +
    (1.5 - 0.5 * abs(x6)) * sqrt(abs(abs(x6)-1)/(abs(x6)-1)) -
    6 * sqrt(10) * sqrt(4-(abs(x6)-1)^2)/14
d6 &amp;lt;- data.frame(x6=x6,y6=y6)
p6 &amp;lt;- p5+geom_point(data=d6,aes(x=x6,y=y6), colour=&amp;quot;blue&amp;quot;)

multiplot &amp;lt;- function (..., plotlist = NULL, cols = 1, layout = NULL) {
    plots &amp;lt;- c(list(...), plotlist)
    numPlots = length(plots)
    if (is.null(layout)) {
        layout &amp;lt;- matrix(seq(1, cols * ceiling(numPlots/cols)),
            ncol = cols, nrow = ceiling(numPlots/cols))
    }
    if (numPlots == 1) {
        print(plots[[1]])
    }
    else {
        grid.newpage()
        pushViewport(viewport(layout = grid.layout(nrow(layout),
            ncol(layout))))
        for (i in 1:numPlots) {
            matchidx &amp;lt;- as.data.frame(which(layout == i, arr.ind = TRUE))
            print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                layout.pos.col = matchidx$col))
        }
    }
}

multiplot(p1,p2,p3,p4,p5,p6, cols=2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_batman.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;分面-facet:c38c63fac86d2290b6bc01da39216614&#34;&gt;分面（Facet）&lt;/h3&gt;

&lt;p&gt;在《&lt;a href=&#34;http://book.douban.com/subject/24527091/&#34;&gt;ggplot2:
数据分析与图形艺术&lt;/a&gt;》一书的翻译中，一开始译者把facet翻译成切片，我在校稿的时候发现了，给他们写信，推荐翻译成分面，如果是slice这个词，翻译成切片倒是很精准，BSD的硬盘分区就叫slice，但facet从词源上看就是小脸的意思，翻译成分面才到位。给他们写信的时候，我还专门查了&lt;a href=&#34;http://dict.cnki.net/&#34;&gt;CNKI翻译助手&lt;/a&gt;，发现这词在信息学中，翻成分面早已是固定的。我感觉这是我对这本书翻译的最大贡献，校稿过程中发现的少量小问题远比不上这个关键词意思的把握上。&lt;/p&gt;

&lt;p&gt;分面可以让我们按照某种给定的条件，对数据进行分组，然后分别画图。
在统计变换一节中，提到如果按切工分组作回归线，显然图会很乱，有了分面功能，我们可以分别作图。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(small, aes(x=carat, y=price))+geom_point(aes(colour=cut))+scale_y_log10() +facet_wrap(~cut)+stat_smooth()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig18.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;主题-theme:c38c63fac86d2290b6bc01da39216614&#34;&gt;主题（Theme）&lt;/h3&gt;

&lt;p&gt;通过ggplot画图之后，我们可能还需要对图进行定制，像title, xlab,
ylab这些高频需要用到的，自不用说，ggplot2提供了ggtitle(),
xlab()和ylab()来实现。 比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p &amp;lt;- ggplot(small)+geom_boxplot(aes(x=cut, y=price,fill=color))
p + ggtitle(&amp;quot;Price vs Cut&amp;quot;)+xlab(&amp;quot;Cut&amp;quot;)+ylab(&amp;quot;Price&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2.fig19.png&#34; alt=&#34;&#34; /&gt;
但是这个远远满足不了需求，我们需要改变字体，字体大小，坐标轴，背景等各种元素，这需要通过theme()函数来完成。&lt;/p&gt;

&lt;p&gt;ggplot2提供一些已经写好的主题，比如&lt;code&gt;theme_grey()&lt;/code&gt;为默认主题，我经常用的&lt;code&gt;theme_bw()&lt;/code&gt;为白色背景的主题，还有&lt;code&gt;theme_classic()&lt;/code&gt;主题，和R的基础画图函数较像。&lt;/p&gt;

&lt;p&gt;别外ggthemes包提供了一些主题可供使用，包括：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theme_economist theme_economist_white
theme_wsj       theme_excel
theme_few       theme_foundation
theme_igray     theme_solarized
theme_stata     theme_tufte
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;require(ggthemes)
p + theme_wsj()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig20.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在2013年发表的文章&lt;a href=&#34;http://pubs.rsc.org/en/content/articlelanding/2013/mt/c3mt00126a#!divAbstract&#34;&gt;Putative cobalt- and nickel-binding proteins and
motifs in Streptococcus
pneumoniae&lt;/a&gt;中的图3就是使用&lt;code&gt;theme_stata&lt;/code&gt;来画的。&lt;/p&gt;

&lt;p&gt;至于如何改变这些元素，我觉得我之前&lt;a href=&#34;http://guangchuangyu.github.io/2012/02/draw-chinese-character-jiong-using-ggplot2/&#34;&gt;画囧字的博文&lt;/a&gt;可以做为例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;f &amp;lt;- function(x) 1/(x^2-1)
x &amp;lt;- seq(-3,3, by=0.001)
y &amp;lt;- f(x)
d &amp;lt;- data.frame(x=x,y=y)
 
p &amp;lt;- ggplot()
p &amp;lt;- p+geom_rect(fill = &amp;quot;white&amp;quot;,color=&amp;quot;black&amp;quot;,size=3,
aes(NULL, NULL,xmin=-3, xmax=3,
ymin=-3,ymax=3, alpha=0.1))
 
p &amp;lt;- p + geom_line(data=d, aes(x,y), size=3)+ylim(-3,3)
theme_null &amp;lt;- function() {
    theme_bw() %+replace%
    theme(axis.text.x=element_blank(),
    axis.text.y=element_blank(),
    legend.position=&amp;quot;none&amp;quot;,
    panel.grid.minor=element_blank(),
    panel.grid.major=element_blank(),
    panel.background=element_blank(),
    axis.ticks=element_blank(),
    panel.border=element_blank())
}
 
p+theme_null()+xlab(&amp;quot;&amp;quot;)+ylab(&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2012/02/jiong.png&#34; alt=&#34;&#34; /&gt;
详细的说明，可以参考?theme的帮助文档。&lt;/p&gt;

&lt;h3 id=&#34;二维密度图:c38c63fac86d2290b6bc01da39216614&#34;&gt;二维密度图&lt;/h3&gt;

&lt;p&gt;在这个文档里，为了作图方便，我们使用diamonds数据集的一个子集，如果使用全集，数据量太大，画出来散点就糊了，这种情况可以使用二维密度力来呈现。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(diamonds, aes(carat, price))+ stat_density2d(aes(fill = ..level..), geom=&amp;quot;polygon&amp;quot;)+ scale_fill_continuous(high=&#39;darkred&#39;,low=&#39;darkgreen&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2.fig22.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;ggplot2实例:c38c63fac86d2290b6bc01da39216614&#34;&gt;ggplot2实例&lt;/h3&gt;

&lt;p&gt;蝴蝶图：详见《Modern Applied Statistics with S-PLUS》第一章。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;theta &amp;lt;- seq(0,24*pi, len=2000)
radius &amp;lt;- exp(cos(theta)) - 2*cos(4*theta) + sin(theta/12)^5
dd &amp;lt;- data.frame(x=radius*sin(theta), y=radius*cos(theta))
ggplot(dd, aes(x, y))+geom_path()+theme_null()+xlab(&amp;quot;&amp;quot;)+ylab(&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_fig25.png&#34; alt=&#34;&#34; /&gt;
这个图，我想展示的是对细节的修改上，在画囧字的时候，把画布上的元素都给清楚了，我把它定义为theme_null主题，在这里，直接应用，我们可以形成自己的画图风格，并写出自己的主题函数固定下来。&lt;/p&gt;

&lt;p&gt;最后以生物界中常用的柱状图+误差图为实例，展示ggplot2非常灵活的图层。以我2011年发表的文章&lt;a href=&#34;http://guangchuangyu.github.io/2010/11/phosphoproteome-profile-of-human-lung-cancer-cell-line-a549/&#34;&gt;Phosphoproteome
profile of human lung cancer cell line
A549&lt;/a&gt;中的westernblot数据为例。这个实例展示了图层，标尺，主题，注释和各种细节微调多种元素。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Normal &amp;lt;- c(0.83, 0.79, 0.99, 0.69)
Cancer &amp;lt;- c(0.56, 0.56, 0.64, 0.52)
m &amp;lt;- c(mean(Normal), mean(Cancer))
s &amp;lt;- c(sd(Normal), sd(Cancer))
d &amp;lt;- data.frame(V=c(&amp;quot;Normal&amp;quot;, &amp;quot;Cancer&amp;quot;), mean=m, sd=s)
d$V &amp;lt;- factor(d$V, levels=c(&amp;quot;Normal&amp;quot;, &amp;quot;Cancer&amp;quot;))

p &amp;lt;- ggplot(d, aes(V, mean, fill=V, width=.5))
p &amp;lt;- p+geom_errorbar(aes(ymin=mean, ymax=mean+sd, width=.2), 
                     position=position_dodge(width=.8))
p &amp;lt;- p + geom_bar(stat=&amp;quot;identity&amp;quot;, position=position_dodge(width=.8), colour=&amp;quot;black&amp;quot;)
p &amp;lt;- p + scale_fill_manual(values=c(&amp;quot;grey80&amp;quot;, &amp;quot;white&amp;quot;))
p &amp;lt;- p + theme_bw() +theme(legend.position=&amp;quot;none&amp;quot;) + xlab(&amp;quot;&amp;quot;) + ylab(&amp;quot;&amp;quot;)
p &amp;lt;- p + theme(axis.text.x = element_text(face=&amp;quot;bold&amp;quot;, size=12), 
               axis.text.y = element_text(face=&amp;quot;bold&amp;quot;, size=12))
p &amp;lt;- p+scale_y_continuous(expand=c(0,0), limits=c(0, 1.2), breaks=seq(0, 1.2, by=.2))
p &amp;lt;- p+geom_segment(aes(x=1, y=.98, xend=1, yend=1.1))
p &amp;lt;- p+geom_segment(aes(x=2, y=.65, xend=2, yend=1.1))
p &amp;lt;- p+geom_segment(aes(x=1, y=1.1, xend=2, yend=1.1))
p &amp;lt;- p + annotate(&amp;quot;text&amp;quot;, x=1.5, y=1.08, label=&amp;quot;*&amp;quot;)
print(p)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/05/ggplot2_26.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;更多实例，可以参考我使用&lt;a href=&#34;http://guangchuangyu.github.io/2011/08/ggplot2-version-of-figures-in-25-recipes-for-getting-started-with-r/&#34;&gt;ggplot2实现&lt;25 Recipes for Getting Started
with
R&gt;一书中的所有图片&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>visualization methods in ChIPseeker</title>
      <link>http://guangchuangyu.github.io/2014/04/visualization-methods-in-chipseeker/</link>
      <pubDate>Wed, 30 Apr 2014 06:33:41 +0800</pubDate>
      
      <guid>http://guangchuangyu.github.io/2014/04/visualization-methods-in-chipseeker/</guid>
      <description>

&lt;p&gt;After two weeks developed, I have added/updated some plot functions in
&lt;a href=&#34;http://bioconductor.org/packages/release/bioc/html/ChIPseeker.html&#34;&gt;ChIPseeker&lt;/a&gt;
(version &amp;gt;=1.0.1).&lt;/p&gt;

&lt;h3 id=&#34;chip-peaks-over-chromosomes:6a8a65de687a162a83f53f5c5a317279&#34;&gt;ChIP peaks over Chromosomes&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;&amp;gt; files=getSampleFiles()
&amp;gt; peak=readPeakFile(files[[4]])
&amp;gt; peak
GRanges object with 1331 ranges and 2 metadata columns:
         seqnames                 ranges strand   |             V4        V5
                               |        
     [1]     chr1     [ 815092,  817883]      *   |    MACS_peak_1    295.76
     [2]     chr1     [1243287, 1244338]      *   |    MACS_peak_2     63.19
     [3]     chr1     [2979976, 2981228]      *   |    MACS_peak_3    100.16
     [4]     chr1     [3566181, 3567876]      *   |    MACS_peak_4    558.89
     [5]     chr1     [3816545, 3818111]      *   |    MACS_peak_5     57.57
     ...      ...                    ...    ... ...            ...       ...
  [1327]     chrX [135244782, 135245821]      *   | MACS_peak_1327     55.54
  [1328]     chrX [139171963, 139173506]      *   | MACS_peak_1328    270.19
  [1329]     chrX [139583953, 139586126]      *   | MACS_peak_1329    918.73
  [1330]     chrX [139592001, 139593238]      *   | MACS_peak_1330    210.88
  [1331]     chrY [ 13845133,  13845777]      *   | MACS_peak_1331     58.39
  ---
  seqlengths:
    chr1 chr10 chr11 chr12 chr13 chr14 ...  chr6  chr7  chr8  chr9  chrX  chrY
      NA    NA    NA    NA    NA    NA ...    NA    NA    NA    NA    NA    NA
&amp;gt; covplot(peak, weightCol=&amp;quot;V5&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/04/chrCoverage.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;heatmap-of-chip-binding-to-tss-regions:6a8a65de687a162a83f53f5c5a317279&#34;&gt;Heatmap of ChIP binding to TSS regions&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;require(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb &amp;lt;- TxDb.Hsapiens.UCSC.hg19.knownGene
peakHeatmap(files, weightCol=&amp;quot;V5&amp;quot;, TxDb=txdb, upstream=3000, downstream=3000, color=rainbow(length(files)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/04/peakHeat2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;average-profile-of-chip-peaks-binding-to-tss-region:6a8a65de687a162a83f53f5c5a317279&#34;&gt;Average Profile of ChIP peaks binding to TSS region&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;plotAvgProf(files, TranscriptDb=txdb, weightCol=&amp;quot;V5&amp;quot;, upstream=3000, downstream=3000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/04/avgProf2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;genomic-annotation:6a8a65de687a162a83f53f5c5a317279&#34;&gt;Genomic Annotation&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;peakAnnoList=lapply(files, annotatePeak)
plotAnnoPie(peakAnnoList[[1]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/04/pieAnno.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;plotAnnoBar(peakAnnoList)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/04/barAnno.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;distance-to-tss:6a8a65de687a162a83f53f5c5a317279&#34;&gt;Distance to TSS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;plotDistToTSS(peakAnnoList)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/04/distTSS.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;overlap-of-peak-sets:6a8a65de687a162a83f53f5c5a317279&#34;&gt;Overlap of peak sets&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-lang=&amp;quot;rsplus&amp;quot;&#34;&gt;genes= lapply(peakAnnoList, function(i) as.data.frame(i)$geneId)
vennplot(genes)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GuangchuangYu/ygc_name/master/2014/04/venn.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the future version, ChIPseeker will support statistical comparison
among ChIP peak sets, and incorporate open access database GEO for users
to compare their own dataset to those deposited in database. Significant
overlap among peak sets can be used to infer cooperative regulation.
This feature will soon be available.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>