<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grid on Guangchuang YU</title>
    <link>https://guangchuangyu.github.io/tags/grid/</link>
    <description>Recent content in Grid on Guangchuang YU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Guangchuang YU</copyright>
    <lastBuildDate>Thu, 02 Nov 2017 15:30:00 +0800</lastBuildDate>
    <atom:link href="/tags/grid/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>shadow text effect in grid and ggplot2 graphics</title>
      <link>https://guangchuangyu.github.io/2017/11/shadow-text-effect-in-grid-and-ggplot2-graphics/</link>
      <pubDate>Thu, 02 Nov 2017 15:30:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/2017/11/shadow-text-effect-in-grid-and-ggplot2-graphics/</guid>
      <description>&lt;p&gt;After the release of &lt;code&gt;meme&lt;/code&gt; package, I received several feedbacks from users.&lt;/p&gt;

&lt;p&gt;The most usefule one is &lt;a href=&#34;http://disq.us/p/1n9zi69&#34; target=&#34;_blank&#34;&gt;the comment&lt;/a&gt; on my blog post:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sercan Kahveci&lt;/p&gt;

&lt;p&gt;Greetings Mr. Yu,&lt;/p&gt;

&lt;p&gt;I am very happy that this package exists. Thank you for making it! I would like to request a feature, to ensure the package is able to compete with professional meme-creation tools like memegenerator and paint.net. Since memes often use the font Impact, in white and with black outline, I believe the package would be more powerful if it also did that automatically.&lt;/p&gt;

&lt;p&gt;Regards,&lt;/p&gt;

&lt;p&gt;Sercan Kahveci, MSc&lt;/p&gt;

&lt;p&gt;Content creator at Questionable Research Memes on Facebook
&lt;a href=&#34;https://www.facebook.com/QResearchMemes/&#34; target=&#34;_blank&#34;&gt;https://www.facebook.com/QResearchMemes/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The words, &amp;lsquo;compete with professional meme-creation tools&amp;rsquo;, stimulated me to develop text plotting with background outline effect.&lt;/p&gt;

&lt;p&gt;Now this feature is available in &lt;a href=&#34;https://cran.r-project.org/package=meme&#34; target=&#34;_blank&#34;&gt;meme&lt;/a&gt; v&amp;gt;=0.0.7, which can be downloaded from CRAN.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;library(meme)
u &amp;lt;- system.file(&amp;quot;angry8.jpg&amp;quot;, package=&amp;quot;meme&amp;quot;)
meme(u, &amp;quot;code&amp;quot;, &amp;quot;all the things!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/meme/shadowtext.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To make this &lt;strong&gt;shadow text&lt;/strong&gt; feature available to the R community, I created another package, &lt;a href=&#34;https://cran.r-project.org/web/packages/shadowtext/&#34; target=&#34;_blank&#34;&gt;shadowtext&lt;/a&gt;, that creates/draws text grob with background shadow for &lt;code&gt;grid&lt;/code&gt; and &lt;code&gt;ggplot2&lt;/code&gt;. If you are interesting, please refer to the &lt;a href=&#34;https://cran.r-project.org/web/packages/shadowtext/vignettes/shadowtext.html&#34; target=&#34;_blank&#34;&gt;online vignette&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/shadowtext/shadowtext_files/figure-markdown_strict/unnamed-chunk-2-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/shadowtext/shadowtext_files/figure-markdown_strict/unnamed-chunk-3-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>create meme in R</title>
      <link>https://guangchuangyu.github.io/2017/10/create-meme-in-r/</link>
      <pubDate>Wed, 25 Oct 2017 15:13:35 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/2017/10/create-meme-in-r/</guid>
      <description>&lt;p&gt;I developed a tiny toy package, &lt;code&gt;meme&lt;/code&gt;, which is now on CRAN. As it&amp;rsquo;s name indicated, it was designed to create memes, which are captioned photos that are intended to be funny, riduculous.&lt;/p&gt;

&lt;h2 id=&#34;meme&#34;&gt;&lt;code&gt;meme()&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The package is quite simple. You can use &lt;code&gt;meme()&lt;/code&gt; function to add meme captions, and this is all the package supposed to do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(meme)
u &amp;lt;- &amp;quot;http://www.happyfamilyneeds.com/wp-content/uploads/2017/08/angry8.jpg&amp;quot;
meme(u, &amp;quot;code&amp;quot;, &amp;quot;all the things!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/meme/Figs/unnamed-chunk-2-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-grammar&#34;&gt;the grammar üôà&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;meme&lt;/code&gt; package was implemented using &lt;code&gt;grid&lt;/code&gt; graphic system. Since &lt;code&gt;grid&lt;/code&gt; is the most flexible graphic system in R, I try to mimic &lt;code&gt;ggplot2&lt;/code&gt; (although very superficial) for practice.&lt;/p&gt;

&lt;p&gt;User can use &lt;code&gt;mmplot()&lt;/code&gt; to read and plot the input image and then using &lt;code&gt;+ mm_caption()&lt;/code&gt; to add meme captions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mmplot(u) + mm_caption(&amp;quot;calm down&amp;quot;, &amp;quot;and RTFM&amp;quot;, color=&amp;quot;purple&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/meme/Figs/unnamed-chunk-3-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;meme-save&#34;&gt;&lt;code&gt;meme_save()&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;meme&lt;/code&gt; output can be saved as an object, and can be exported to file using &lt;code&gt;ggsave()&lt;/code&gt;. Since we would like to keep the original figure aspect ratio for output meme figure, I provide a helper function, &lt;code&gt;meme_save()&lt;/code&gt;, which takes care of the figure aspect ratio and then called &lt;code&gt;ggsave()&lt;/code&gt; to export the figure.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;u2 &amp;lt;- &amp;quot;http://i0.kym-cdn.com/entries/icons/mobile/000/000/745/success.jpg&amp;quot;
x &amp;lt;- meme(u2, &amp;quot;please&amp;quot;, &amp;quot;tell me more&amp;quot;)
meme_save(x, file=&amp;quot;docs/Figs/meme.png&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/meme/Figs/meme.png&#34; width=&#34;672&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-plot-method&#34;&gt;the &lt;code&gt;plot&lt;/code&gt; method&lt;/h2&gt;

&lt;p&gt;Users can &lt;code&gt;plot&lt;/code&gt; the &lt;code&gt;meme()&lt;/code&gt; output and change the caption or other parameters in real time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(x, size = 2, &amp;quot;happy friday!&amp;quot;, &amp;quot;wait, sorry, it&#39;s monday&amp;quot;, color = &amp;quot;firebrick&amp;quot;, font = &amp;quot;Courier&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/meme/Figs/unnamed-chunk-5-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-method&#34;&gt;the &lt;code&gt;+&lt;/code&gt; method&lt;/h2&gt;

&lt;p&gt;Instead of using parameters in &lt;code&gt;plot()&lt;/code&gt; explictely, Users can use &lt;code&gt;+ aes()&lt;/code&gt; to set the plot parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x + aes(upper = &amp;quot;#barbarplots&amp;quot;,
        lower = &amp;quot;friends don&#39;t let friends make bar plots&amp;quot;,
        color = firebrick, font = Courier, size=1.5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/meme/Figs/unnamed-chunk-6-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;or using &lt;code&gt;+ list()&lt;/code&gt;. The following command will also generate the figure displayed above.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x + list(upper = &amp;quot;#barbarplots&amp;quot;,
        lower = &amp;quot;friends don&#39;t let friends make bar plots&amp;quot;,
        color = &amp;quot;firebrick&amp;quot;, font = &amp;quot;Courier&amp;quot;, size=1.5)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;multi-language-support&#34;&gt;multi-language support&lt;/h2&gt;

&lt;p&gt;I didn&amp;rsquo;t do anything about it. Multi-language was supported internally. Just simply select a font for your language.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y &amp;lt;- meme(u, &amp;quot;ÂçßÊßΩ&amp;quot;, &amp;quot;Âê¨ËØ¥‰Ω†ÊÉ≥Áî®‰∏≠Êñá&amp;quot;, font=&amp;quot;STHeiti&amp;quot;)
y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/meme/Figs/unnamed-chunk-8-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As the &lt;code&gt;meme&lt;/code&gt; package was developed using &lt;code&gt;grid&lt;/code&gt;, It would be better to provide function to convert the output object to &lt;code&gt;grob&lt;/code&gt;. Similar to &lt;code&gt;ggplotGrob()&lt;/code&gt; for &lt;code&gt;ggplot&lt;/code&gt; object, I provide &lt;code&gt;memeGrob()&lt;/code&gt; for the &lt;code&gt;meme&lt;/code&gt; object and this making it possible to edit the details of the graph and compatible with the &lt;code&gt;grid&lt;/code&gt; ecosystem.&lt;/p&gt;

&lt;p&gt;Here are the examples of using &lt;code&gt;meme&lt;/code&gt; in &lt;code&gt;grid&lt;/code&gt;, &lt;code&gt;ggplot2&lt;/code&gt; and &lt;code&gt;cowplot&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;grid-support&#34;&gt;grid support&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(grid)
mm &amp;lt;- meme(u, &amp;quot;code&amp;quot;, &amp;quot;all the things!&amp;quot;, size=.3, color=&#39;firebrick&#39;)

grid.newpage()
pushViewport(viewport(width=.9, height=.9))
grid.rect(gp = gpar(lty=&amp;quot;dashed&amp;quot;))

xx &amp;lt;- seq(0, 2*pi , length.out=10)
yy &amp;lt;- sin(xx)

for (i in seq_along(xx)) {
    vp &amp;lt;- viewport(x = xx[i]/(2*pi), y = (yy[i]-min(yy))/2, width=.05, height=.05)
    print(mm, vp = vp)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/meme/Figs/unnamed-chunk-9-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;ggplot2-support&#34;&gt;ggplot2 support&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)
library(ggimage)

d &amp;lt;- data.frame(x = xx, y = yy)
ggplot(d, aes(x, y)) + geom_line() +
    geom_subview(mm, x = xx, y = yy, width=.3, height=.15)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/meme/Figs/unnamed-chunk-10-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(d, aes(x, y)) +
    geom_subview(mm+aes(size=3), x=0, y=0, width=Inf, height=Inf) +
    geom_point() + geom_line()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/meme/Figs/unnamed-chunk-10-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;cowplot-support&#34;&gt;cowplot support&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cowplot::plot_grid(x, y, ncol=1, labels = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/meme/Figs/unnamed-chunk-11-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
