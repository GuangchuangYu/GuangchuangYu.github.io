<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mc on Guangchuang Yu</title>
    <link>https://guangchuangyu.github.io/tags/mc/</link>
    <description>Recent content in mc on Guangchuang Yu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Sep 2011 06:40:22 +0800</lastBuildDate>
    
	<atom:link href="https://guangchuangyu.github.io/tags/mc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MC积分</title>
      <link>https://guangchuangyu.github.io/2011/09/mc-integration/</link>
      <pubDate>Thu, 22 Sep 2011 06:40:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/2011/09/mc-integration/</guid>
      <description>&lt;p&gt;Monte Carlo方法由冯·诺伊曼于二战时提出，1777年法国人布丰用此思路&lt;a href=&#34;http://guangchuangyu.github.io/cn/2011/09/monte-carlo-estimate-pi/&#34;&gt;估计pi值&lt;/a&gt;被认为是Monte
Carlo的起源，这个方法简单又快速，通过产生随机数，将数值计算问题变成随机变量的某些特征值（比如期望值）。&lt;/p&gt;

&lt;p&gt;积分运算，和&lt;a href=&#34;http://guangchuangyu.github.io/cn/2011/09/monte-carlo-estimate-pi/&#34;&gt;估计pi值&lt;/a&gt;一样，用hit
and miss法估计。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hit_miss &amp;lt;- function(fun, lower, upper, n=500) {
    # Monte Carlo integration using the hit and miss method
    x &amp;lt;- runif(n, lower, upper)
    f.value &amp;lt;- sapply(seq(lower, upper, 0.001), fun)
    f.min &amp;lt;- min(f.value)
    f.max &amp;lt;- max(f.value)
    y &amp;lt;- runif(n, f.min, f.max)
    hits &amp;lt;- sum(y &amp;lt;= fun(x))
    area &amp;lt;- (upper-lower) * f.min + hits/n * (upper-lower) * (f.max-f.min)
    return(area)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hit and miss方法收敛太慢，效率并不高，通常所说的MC积分是指下面这个方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Monte Carlo估计pi值</title>
      <link>https://guangchuangyu.github.io/2011/09/monte-carlo-estimate-pi/</link>
      <pubDate>Wed, 21 Sep 2011 10:40:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/2011/09/monte-carlo-estimate-pi/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://mathfaculty.fullerton.edu/mathews/n2003/montecarlopi/MonteCarloPiMod/Images/MonteCarloPiMod_gr_11.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;圆和外接正方形的面积比，是$ \frac{\pi r^2}{(2r)^2} = \frac{\pi}{4}$.&lt;/p&gt;

&lt;p&gt;通过这一比值，可以使用&lt;a href=&#34;http://baike.baidu.com/view/7775.htm&#34;&gt;蒙特-卡罗方法&lt;/a&gt;来估计Pi，这是Monte Carlo方法的最经典的一个例子。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;getPI &amp;lt;- function(N) {
    x &amp;lt;- runif(N)
    y &amp;lt;- runif(N)
    hits &amp;lt;- sum(sqrt(x^2+y^2) &amp;lt; 1)
    pi &amp;lt;- 4*hits/N
    return(pi)
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>